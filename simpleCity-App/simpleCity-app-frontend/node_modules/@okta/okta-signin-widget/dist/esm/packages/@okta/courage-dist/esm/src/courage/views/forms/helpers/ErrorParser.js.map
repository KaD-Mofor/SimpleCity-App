{"version":3,"file":"ErrorParser.js","sources":["../../../../../../../../../../../packages/@okta/courage-dist/esm/src/courage/views/forms/helpers/ErrorParser.js"],"sourcesContent":["import oktaUnderscore from '../../../util/underscore-wrapper.js';\nimport StringUtil from '../../../util/StringUtil.js';\n\nconst FIELD_REGEX = /^([\\S]+): (.+)$/;\nvar ErrorParser = {\n  /**\n   * Helper function that returns the json output of an xhr objext\n   * @param  {jqXhr} xhr\n   * @return {Object}\n   */\n  getResponseJSON: function (xhr) {\n    try {\n      return xhr.responseJSON || JSON.parse(xhr.responseText);\n    } catch (e) {// ignore error\n    }\n  },\n\n  /**\n   * Parses an error summary to extract a field name and an error message\n   * @param  {String} errorSummary The raw error summary\n   * @return {String[]} An array with two members: [field name, error message]\n   */\n  parseErrorSummary: function (errorSummary) {\n    const matches = errorSummary.match(FIELD_REGEX); // error format is: `fieldName: The field cannot be left blank`\n\n    if (matches) {\n      return [matches[1], matches[2]];\n    }\n  },\n\n  /**\n   * Parses an error cause object to extract a field name from property attribute\n   * and an error message form errorSummary attribute. It looks to see if there is\n   * a custom override/translation for the erorrCause.reason before using the errorSummary\n   * @param  {Object} errorCause object\n   * @return {String[]} An array with two members: [field name, error message]\n   */\n  parseErrorCauseObject: function (errorCause) {\n    if (errorCause.property && errorCause.errorSummary) {\n      const localizedMsg = StringUtil.localize(errorCause.reason);\n      const apiMsg = errorCause.errorSummary;\n      const field = errorCause.property;\n      const errorMessage = localizedMsg.indexOf('L10N_ERROR[') === -1 ? localizedMsg : apiMsg;\n      return [field, errorMessage];\n    }\n  },\n  parseErrors: function (resp) {\n    const responseJSON = this.getResponseJSON(resp);\n    return oktaUnderscore.map(responseJSON && responseJSON.errorCauses || [], function (errorCause) {\n      return ('' + errorCause.errorSummary).replace(FIELD_REGEX, '$2');\n    });\n  },\n\n  /**\n   * Parses the response for errors\n   * Returns a map of field names > array or error messages\n   * Example:\n   * ```javascript\n   * {\n   *   url: ['The field cannot be left blank', 'The field has to be a valid URI'],\n   *   name: ['The field cannot be left blank']\n   * }\n   * ```\n   * @param  {Object} resp\n   * @return {Object}\n   */\n  parseFieldErrors: function (resp) {\n    const responseJSON = this.getResponseJSON(resp);\n    const errors = {}; // xhr error object\n\n    if (responseJSON) {\n      /* eslint complexity: [2, 9] */\n      oktaUnderscore.each(responseJSON.errorCauses || [], function (cause) {\n        let res = [];\n\n        if (cause.property && cause.errorSummary) {\n          res = this.parseErrorCauseObject(cause);\n        } else if (cause.location && cause.errorSummary) {\n          // To handle new api error format for field level errors.\n          // Ignoring the reason attribute as the translation happens in the API layer and not in the client any more.\n          res = [cause.location, cause.errorSummary];\n        } else {\n          res = this.parseErrorSummary(cause && cause.errorSummary || '');\n        }\n\n        if (res) {\n          const fieldName = res[0];\n          const message = res[1];\n          errors[fieldName] || (errors[fieldName] = []);\n          errors[fieldName].push(message);\n        }\n      }, this);\n    } // validation key/value object\n    else if (oktaUnderscore.isObject(resp) && oktaUnderscore.size(resp)) {\n      oktaUnderscore.each(resp, function (msg, field) {\n        errors[field] = [msg];\n      });\n    }\n\n    return oktaUnderscore.size(errors) ? errors : undefined;\n  }\n};\n\nexport { ErrorParser as default };\n"],"names":["FIELD_REGEX","ErrorParser","getResponseJSON","xhr","responseJSON","JSON","parse","responseText","e","parseErrorSummary","errorSummary","matches","match","parseErrorCauseObject","errorCause","property","localizedMsg","StringUtil","localize","reason","apiMsg","field","errorMessage","indexOf","parseErrors","resp","oktaUnderscore","map","errorCauses","replace","parseFieldErrors","errors","each","cause","res","location","fieldName","message","push","isObject","size","msg","undefined"],"mappings":"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"}