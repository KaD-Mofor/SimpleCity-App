{"version":3,"file":"BaseView.js","sources":["../../../../../../../../../packages/@okta/courage-dist/esm/src/courage/views/BaseView.js"],"sourcesContent":["import Backbone from '../vendor/lib/backbone.js';\nimport oktaUnderscore from '../util/underscore-wrapper.js';\nimport FrameworkView from '../framework/View.js';\nimport TemplateUtil from '../util/TemplateUtil.js';\n\nconst eventBus = oktaUnderscore.clone(Backbone.Events); // add `broadcast` and `listen` functionality to all views\n// We use one event emitter per all views\n// This means we need to be very careful with event names\n\n\nconst proto = {\n  constructor: function (options, ...rest) {\n    FrameworkView.call(this, options, ...rest);\n    this.module && this.$el.attr('data-view', this.module.id);\n  },\n\n  /**\n   * @deprecated Use {@link #removeChildren}\n   */\n  empty: function () {\n    return this.removeChildren();\n  },\n  compileTemplate: TemplateUtil.tpl,\n\n  /**\n   *\n   * Broadcasts a global event that all views and controllers can subscribe to\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName A unique identifier for the event\n   * @param {...String} param Parameter to pass with the event (can pass more than one parameter)\n   * @deprecated For internal use only\n   * @private\n   */\n  broadcast: function () {\n    eventBus.trigger.apply(eventBus, arguments);\n    return this;\n  },\n\n  /**\n   * Subscribe to broadcast events\n   * for framework use only - prefer using a shared model\n   *\n   * @param {String} eventName The event identifier to subscribe\n   * @param {Function} fn The callback function to invoke\n   * @deprecated For internal use only\n   * @private\n   */\n  listen: function (name, fn) {\n    eventBus.off(name, fn);\n    this.listenTo(eventBus, name, fn);\n    return this;\n  },\n\n  /**\n   * Shows a notification box\n   * @param {String} level success / warning / error\n   * @param {String} message The message to display\n   * @param {Object} [options]\n   * @param {Number} [options.width] Set a custom width\n   * @param {String} [options.title] Set a custom title\n   * @param {Boolean} [options.hide=true] Do we want to auto-hide this notification?\n   * @param {Boolean} [options.dismissable] Show a dismiss button\n   * @example\n   * view.notify('success', 'Group created successfully');\n   */\n  notify: function (level, message, options) {\n    this.broadcast('notification', oktaUnderscore.defaults({\n      message: message,\n      level: level\n    }, options));\n    return this;\n  },\n\n  /**\n   * Shows a confirmation dialog\n   *\n   * Uses https://www.ericmmartin.com/projects/simplemodal/.\n   * If you want to configure the simplemodal options use ConfirmationDialog instead.\n   *\n   * The main difference between this and the native javascript `confirm` method\n   * Is this method is non blocking (note the callback pattern).\n   *\n   * The callback function will run in the context (`this`) of the invoking view.\n   *\n   * @param {String} [title] The title of the confirmation dialog\n   * @param {String} [message] The message of the confirmation dialog\n   * @param {Function} [okfn] The callback to run when the user hits \"OK\" (runs in the context of the invoking view)\n   * @param {Function} [cancelfn] The callback to run when the user hits \"Cancel\"\n   *        (runs in the context of the invoking view)\n   * @example\n   * view.confirm('Delete Group', 'Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * // title will be auto-set to \"Okta\"\n   * view.confirm('Are you sure you want to delete the selected group?', function () {\n   *   model.destroy();\n   * });\n   *\n   * view.confirm({\n   *   title: 'Delete Group', //=> Modal title\n   *   subtitle: 'Are you sure you want to delete the selected group?', //=> Modal subtitle\n   *   content: '<h3 color=\"red\">THIS WILL DELETE THE GROUP!</h3>', //=> A template or a view to add to the modal\n   *   save: 'Delete Group', //=> Button label\n   *   ok: _.bind(model.save, model) // Callback function on hitting \"ok\" button\n   *   cancel: 'Cancel', //=> Button label\n   *   cancelFn: _.bind(model.destroy, model) // Callback function on hitting \"cancel\" button\n   * });\n   */\n  confirm: function (title, message, okfn, cancelfn) {\n    let options;\n    /* eslint max-statements: [2, 12] */\n\n    if (typeof title === 'object') {\n      options = title;\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (arguments.length === 2 && oktaUnderscore.isFunction(message)) {\n        options = {\n          title: 'Okta',\n          // eslint-disable-line @okta/okta/no-unlocalized-text\n          subtitle: title,\n          ok: message\n        };\n      } else {\n        options = {\n          title: title,\n          subtitle: message,\n          ok: okfn,\n          cancelFn: cancelfn\n        };\n      }\n    }\n\n    if (oktaUnderscore.isFunction(options.ok)) {\n      options.ok = oktaUnderscore.bind(options.ok, this);\n    }\n\n    if (oktaUnderscore.isFunction(options.cancelFn)) {\n      options.cancelFn = oktaUnderscore.bind(options.cancelFn, this);\n    }\n\n    this.broadcast('confirmation', options);\n    return this;\n  },\n\n  /**\n   * Shows an alert box\n   *\n   * The main difference between this and the native javascript `alert` method\n   * Is this method is non blocking.\n   *\n   * @param {String} message The message\n   * @example\n   * view.alert('Mission complete');\n   */\n  alert: function (params) {\n    if (oktaUnderscore.isString(params)) {\n      params = {\n        subtitle: params\n      };\n    }\n\n    this.confirm(oktaUnderscore.extend({}, params, {\n      noCancelButton: true\n    }));\n    return this;\n  }\n};\n/**\n * See {@link src/framework/View} for more detail and examples from the base class.\n * @class module:Okta.View\n * @extends src/framework/View\n */\n\n/** @lends module:Okta.View.prototype */\n\nvar BaseView = FrameworkView.extend(proto,\n/** @lends View.prototype */\n{\n  /** @method */\n  decorate: function (TargetView) {\n    const BaseViewView = TargetView.extend({});\n\n    oktaUnderscore.defaults(BaseViewView.prototype, proto);\n\n    return BaseViewView;\n  }\n});\n\nexport { BaseView as default };\n"],"names":["eventBus","oktaUnderscore","clone","Backbone","Events","proto","constructor","options","rest","FrameworkView","call","module","$el","attr","id","empty","removeChildren","compileTemplate","TemplateUtil","tpl","broadcast","trigger","apply","arguments","listen","name","fn","off","listenTo","notify","level","message","defaults","confirm","title","okfn","cancelfn","length","isFunction","subtitle","ok","cancelFn","bind","alert","params","isString","extend","noCancelButton","BaseView","decorate","TargetView","BaseViewView","prototype"],"mappings":"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"}