{"version":3,"file":"FormInputFactory.js","sources":["../../../../../../src/v2/view-builder/internals/FormInputFactory.ts"],"sourcesContent":["import { Collection, _, loc, createButton, InputOptions } from '@okta/courage';\n\nimport AuthenticatorEnrollOptions from '../components/AuthenticatorEnrollOptions';\nimport AuthenticatorVerifyOptions from '../components/AuthenticatorVerifyOptions';\nimport { getAuthenticatorDataForEnroll, getAuthenticatorDataForVerification } from '../utils/AuthenticatorUtil';\nimport { AUTHENTICATOR_KEY, FORMS as RemediationForms } from '../../ion/RemediationConstants';\nimport IDP from 'util/IDP';\nimport AdminScopeList from 'v1/views/admin-consent/ScopeList';\nimport EnduserScopeList from 'v1/views/consent/ScopeList';\nimport CaptchaView from '../views/captcha/CaptchaView';\n\nconst isTextOverflowing = (text, maxWidth) => {\n  // Create a temporary element and attach it to the document so we can compare the client width to the \n  // max width allowed.\n  const elem = document.createElement('div');\n  elem.style.position = 'absolute';\n  elem.style.left = '-9999px';\n  elem.style.whiteSpace = 'nowrap';\n  elem.innerHTML = text;\n\n  document.body.appendChild(elem);\n  const result = elem.clientWidth;\n  document.body.removeChild(elem);\n\n  return result > maxWidth;\n};\n\nconst createAuthenticatorEnrollSelectView = (opt) => {\n  const optionItems = (opt.options || [])\n    .map(opt => {\n      return Object.assign({}, opt, getAuthenticatorDataForEnroll(opt));\n    });\n  return {\n    View: AuthenticatorEnrollOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems),\n    }\n  };\n};\n\nconst createAuthenticatorVerifySelectView = (opt) => {\n  let optionItems = (opt.options || []);\n  // If webauthn enrollments > 1 just show one entry with a generic namne (first) so user doesnt have to select which\n  // one to pick. eg) If there is yubikey5 and another unknown u2f key, user cannot identify that easily. We need to\n  // do this at least  until users can give authenticator enrollments custom names.\n  const authSet = new Set();\n  optionItems = optionItems.filter(opt => {\n    let isDuplicate;\n    if (opt.authenticatorKey === AUTHENTICATOR_KEY.WEBAUTHN) {\n      isDuplicate = authSet.has(opt.authenticatorKey);\n      authSet.add(opt.authenticatorKey);\n    } else if(opt.authenticatorKey === AUTHENTICATOR_KEY.CUSTOM_APP) {\n      // Filter the duplicate enrollment by id for custom app. \n      isDuplicate = authSet.has(opt?.value?.id);\n      authSet.add(opt?.value?.id);\n    }  \n    return !isDuplicate;\n  });\n  optionItems = optionItems.map(opt => {\n    return Object.assign({}, opt, getAuthenticatorDataForVerification(opt));\n  });\n  return {\n    View: AuthenticatorVerifyOptions,\n    options: {\n      name: opt.name,\n      collection: new Collection(optionItems),\n    }\n  };\n};\n\nconst createAdminScopesView = () => {\n  return {\n    View: AdminScopeList,\n  };\n};\nconst createEnduserScopesView = () => {\n  return {\n    View: EnduserScopeList,\n  };\n};\n\nconst createCaptchaView = (opt) => {\n  return {\n    View: CaptchaView,\n    options: {\n      name: opt.name,\n    }    \n  };\n};\n\nconst inputCreationStrategy = {\n  authenticatorEnrollSelect: createAuthenticatorEnrollSelectView,\n  authenticatorVerifySelect: createAuthenticatorVerifySelectView,\n  ['admin-consent']: createAdminScopesView,\n  ['consent']: createEnduserScopesView,\n  ['captcha']: createCaptchaView,\n};\n\n// TODO: move logic to uiSchemaTransformer\nconst create = function(uiSchemaObj) {\n  const strategyFn = inputCreationStrategy[uiSchemaObj.type] || _.identity;\n  return strategyFn(uiSchemaObj);\n};\n\nconst createPIVButton = (settings, appState) => {\n  const pivIdp =\n    appState.get('remediations').filter(idp => idp.name === RemediationForms.PIV_IDP);\n  if (pivIdp.length < 1) {\n    return [];\n  }\n  const pivConfig = settings.get('piv');\n  const className = pivConfig.className || '';\n  return [{\n    attributes: {\n      'data-se': 'piv-card-button',\n    },\n    className: className + ' piv-button',\n    title: pivConfig.text || loc('piv.cac.card', 'login'),\n    click: (e) => {\n      e.preventDefault();\n      appState.trigger('switchForm', RemediationForms.PIV_IDP);\n    },\n  }];\n};\n\n/**\n * Example of `redirect-idp` remediation.\n * {\n *   \"name\": \"redirect-idp\",\n *   \"type\": \"MICROSOFT\",\n *   \"idp\": {\n *      \"id\": \"0oa2szc1K1YPgz1pe0g4\",\n *      \"name\": \"Microsoft IDP\"\n *    },\n *   \"href\": \"http://localhost:3000/sso/idps/0oa2szc1K1YPgz1pe0g4?stateToken=BB...AA\",\n *   \"method\": \"GET\"\n * }\n *\n */\nconst createIdpButtons = ({ settings, appState }) => {\n  // This is the max allowable text width that we can display for IDP buttons.\n  // Generated by taking the 316px width of button minus padding-left (90 px) and padding-right (50px)\n  const MAX_IDP_BUTTON_WIDTH = 186;\n\n  const redirectIdpRemediations =\n    appState.get('remediations').filter(idp => idp.name === RemediationForms.REDIRECT_IDP);\n\n  if (!Array.isArray(redirectIdpRemediations)) {\n    return [];\n  }\n\n  // create piv button\n  const pivButton = createPIVButton(settings, appState);\n\n  //add buttons from idp object\n  const idpButtons = redirectIdpRemediations.map(idpObject => {\n    let type = idpObject.type?.toLowerCase();\n    let displayName;\n\n    if (!_.contains(IDP.SUPPORTED_SOCIAL_IDPS, type)) {\n      type = 'general-idp';\n      // OKTA-396684 - makes sure that custom idps always have a name\n      displayName = loc('customauth.sign.in.with.label', 'login', [idpObject.idp?.name]);\n    } else {\n      displayName = loc(`socialauth.${type}.label`, 'login');\n    }\n\n    const classNames = [\n      'social-auth-button',\n      `social-auth-${type}-button`,\n    ];\n\n    if (type === 'general-idp') {\n      classNames.push('no-translate');\n    }\n\n    if (idpObject.idp.className) {\n      classNames.push(idpObject.idp.className);\n    }\n\n    const button: InputOptions = {\n      attributes: {\n        'data-se': `social-auth-${type}-button`,\n      },\n      className: classNames.join(' '),\n      title: displayName,\n      href: idpObject.href,\n    };\n\n    if (isTextOverflowing(displayName, MAX_IDP_BUTTON_WIDTH)) {\n      // We add a tooltip in case the name gets truncated if too long\n      button.attributes.title = displayName;\n    }\n\n    return button;\n  });\n\n  return [...pivButton, ...idpButtons];\n};\n\nconst createCustomButtons = (settings) => {\n  const customButtons = settings.get('customButtons');\n  return customButtons.map(customButton => {\n    const button = {\n      attributes: {\n        'data-se': customButton.dataAttr\n      },\n      className: customButton.className + ' default-custom-button',\n      title: customButton.title || loc(customButton.i18nKey, 'login'),\n      click: customButton.click\n    };\n    return button;\n  });\n};\n\nconst addCustomButton = (customButtonSettings) => {\n  return createButton({\n    ...customButtonSettings,\n    className: `${customButtonSettings.className} default-custom-button button-primary`,\n  });\n};\n\nexport {\n  create,\n  createIdpButtons,\n  createCustomButtons,\n  addCustomButton,\n  isTextOverflowing\n};\n"],"names":["isTextOverflowing","text","maxWidth","elem","document","createElement","style","position","left","whiteSpace","innerHTML","body","appendChild","result","clientWidth","removeChild","createAuthenticatorEnrollSelectView","opt","optionItems","options","map","Object","assign","getAuthenticatorDataForEnroll","View","AuthenticatorEnrollOptions","name","collection","Collection","createAuthenticatorVerifySelectView","authSet","Set","filter","isDuplicate","authenticatorKey","AUTHENTICATOR_KEY","WEBAUTHN","has","add","CUSTOM_APP","value","id","getAuthenticatorDataForVerification","AuthenticatorVerifyOptions","createAdminScopesView","AdminScopeList","createEnduserScopesView","EnduserScopeList","createCaptchaView","CaptchaView","inputCreationStrategy","authenticatorEnrollSelect","authenticatorVerifySelect","create","uiSchemaObj","strategyFn","type","_","identity","createPIVButton","settings","appState","pivIdp","get","idp","RemediationForms","PIV_IDP","length","pivConfig","className","attributes","title","loc","click","e","preventDefault","trigger","createIdpButtons","MAX_IDP_BUTTON_WIDTH","redirectIdpRemediations","REDIRECT_IDP","Array","isArray","pivButton","idpButtons","idpObject","toLowerCase","displayName","contains","IDP","SUPPORTED_SOCIAL_IDPS","classNames","push","button","join","href","createCustomButtons","customButtons","customButton","dataAttr","i18nKey","addCustomButton","customButtonSettings","createButton"],"mappings":";;;;;;;;;;;;;;;;;;;AAWA,MAAMA,iBAAiB,GAAG,CAACC,IAAI,EAAEC,QAAQ,KAAK;AAC5C;AACA;AACA,EAAA,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;AAC1CF,EAAAA,IAAI,CAACG,KAAK,CAACC,QAAQ,GAAG,UAAU,CAAA;AAChCJ,EAAAA,IAAI,CAACG,KAAK,CAACE,IAAI,GAAG,SAAS,CAAA;AAC3BL,EAAAA,IAAI,CAACG,KAAK,CAACG,UAAU,GAAG,QAAQ,CAAA;EAChCN,IAAI,CAACO,SAAS,GAAGT,IAAI,CAAA;AAErBG,EAAAA,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC,CAAA;AAC/B,EAAA,MAAMU,MAAM,GAAGV,IAAI,CAACW,WAAW,CAAA;AAC/BV,EAAAA,QAAQ,CAACO,IAAI,CAACI,WAAW,CAACZ,IAAI,CAAC,CAAA;EAE/B,OAAOU,MAAM,GAAGX,QAAQ,CAAA;AAC1B,EAAC;AAED,MAAMc,mCAAmC,GAAIC,GAAG,IAAK;AACnD,EAAA,MAAMC,WAAW,GAAG,CAACD,GAAG,CAACE,OAAO,IAAI,EAAE,EACnCC,GAAG,CAACH,GAAG,IAAI;AACV,IAAA,OAAOI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEL,GAAG,EAAEM,6BAA6B,CAACN,GAAG,CAAC,CAAC,CAAA;AACnE,GAAC,CAAC,CAAA;EACJ,OAAO;AACLO,IAAAA,IAAI,EAAEC,0BAA0B;AAChCN,IAAAA,OAAO,EAAE;MACPO,IAAI,EAAET,GAAG,CAACS,IAAI;AACdC,MAAAA,UAAU,EAAE,IAAIC,UAAU,CAACV,WAAW,CAAA;AACxC,KAAA;GACD,CAAA;AACH,CAAC,CAAA;AAED,MAAMW,mCAAmC,GAAIZ,GAAG,IAAK;AACnD,EAAA,IAAIC,WAAW,GAAID,GAAG,CAACE,OAAO,IAAI,EAAG,CAAA;AACrC;AACA;AACA;AACA,EAAA,MAAMW,OAAO,GAAG,IAAIC,GAAG,EAAE,CAAA;AACzBb,EAAAA,WAAW,GAAGA,WAAW,CAACc,MAAM,CAACf,GAAG,IAAI;AACtC,IAAA,IAAIgB,WAAW,CAAA;AACf,IAAA,IAAIhB,GAAG,CAACiB,gBAAgB,KAAKC,iBAAiB,CAACC,QAAQ,EAAE;MACvDH,WAAW,GAAGH,OAAO,CAACO,GAAG,CAACpB,GAAG,CAACiB,gBAAgB,CAAC,CAAA;AAC/CJ,MAAAA,OAAO,CAACQ,GAAG,CAACrB,GAAG,CAACiB,gBAAgB,CAAC,CAAA;KAClC,MAAM,IAAGjB,GAAG,CAACiB,gBAAgB,KAAKC,iBAAiB,CAACI,UAAU,EAAE;AAAA,MAAA,IAAA,UAAA,EAAA,WAAA,CAAA;AAC/D;AACAN,MAAAA,WAAW,GAAGH,OAAO,CAACO,GAAG,CAACpB,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,UAAA,GAAHA,GAAG,CAAEuB,KAAK,MAAV,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAYC,EAAE,CAAC,CAAA;AACzCX,MAAAA,OAAO,CAACQ,GAAG,CAACrB,GAAG,KAAHA,IAAAA,IAAAA,GAAG,KAAHA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,WAAAA,GAAAA,GAAG,CAAEuB,KAAK,MAAV,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAYC,EAAE,CAAC,CAAA;AAC7B,KAAA;AACA,IAAA,OAAO,CAACR,WAAW,CAAA;AACrB,GAAC,CAAC,CAAA;AACFf,EAAAA,WAAW,GAAGA,WAAW,CAACE,GAAG,CAACH,GAAG,IAAI;AACnC,IAAA,OAAOI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEL,GAAG,EAAEyB,mCAAmC,CAACzB,GAAG,CAAC,CAAC,CAAA;AACzE,GAAC,CAAC,CAAA;EACF,OAAO;AACLO,IAAAA,IAAI,EAAEmB,0BAA0B;AAChCxB,IAAAA,OAAO,EAAE;MACPO,IAAI,EAAET,GAAG,CAACS,IAAI;AACdC,MAAAA,UAAU,EAAE,IAAIC,UAAU,CAACV,WAAW,CAAA;AACxC,KAAA;GACD,CAAA;AACH,CAAC,CAAA;AAED,MAAM0B,qBAAqB,GAAG,MAAM;EAClC,OAAO;AACLpB,IAAAA,IAAI,EAAEqB,cAAAA;GACP,CAAA;AACH,CAAC,CAAA;AACD,MAAMC,uBAAuB,GAAG,MAAM;EACpC,OAAO;AACLtB,IAAAA,IAAI,EAAEuB,gBAAAA;GACP,CAAA;AACH,CAAC,CAAA;AAED,MAAMC,iBAAiB,GAAI/B,GAAG,IAAK;EACjC,OAAO;AACLO,IAAAA,IAAI,EAAEyB,WAAW;AACjB9B,IAAAA,OAAO,EAAE;MACPO,IAAI,EAAET,GAAG,CAACS,IAAAA;AACZ,KAAA;GACD,CAAA;AACH,CAAC,CAAA;AAED,MAAMwB,qBAAqB,GAAG;AAC5BC,EAAAA,yBAAyB,EAAEnC,mCAAmC;AAC9DoC,EAAAA,yBAAyB,EAAEvB,mCAAmC;EAC9D,CAAC,eAAe,GAAGe,qBAAqB;EACxC,CAAC,SAAS,GAAGE,uBAAuB;AACpC,EAAA,CAAC,SAAS,GAAGE,iBAAAA;AACf,CAAC,CAAA;;AAED;AACA,MAAMK,MAAM,GAAG,UAASC,WAAW,EAAE;EACnC,MAAMC,UAAU,GAAGL,qBAAqB,CAACI,WAAW,CAACE,IAAI,CAAC,IAAIC,cAAC,CAACC,QAAQ,CAAA;EACxE,OAAOH,UAAU,CAACD,WAAW,CAAC,CAAA;AAChC,EAAC;AAED,MAAMK,eAAe,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC9C,MAAMC,MAAM,GACVD,QAAQ,CAACE,GAAG,CAAC,cAAc,CAAC,CAAC/B,MAAM,CAACgC,GAAG,IAAIA,GAAG,CAACtC,IAAI,KAAKuC,KAAgB,CAACC,OAAO,CAAC,CAAA;AACnF,EAAA,IAAIJ,MAAM,CAACK,MAAM,GAAG,CAAC,EAAE;AACrB,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;AACA,EAAA,MAAMC,SAAS,GAAGR,QAAQ,CAACG,GAAG,CAAC,KAAK,CAAC,CAAA;AACrC,EAAA,MAAMM,SAAS,GAAGD,SAAS,CAACC,SAAS,IAAI,EAAE,CAAA;AAC3C,EAAA,OAAO,CAAC;AACNC,IAAAA,UAAU,EAAE;AACV,MAAA,SAAS,EAAE,iBAAA;KACZ;IACDD,SAAS,EAAEA,SAAS,GAAG,aAAa;IACpCE,KAAK,EAAEH,SAAS,CAACnE,IAAI,IAAIuE,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC;IACrDC,KAAK,EAAGC,CAAC,IAAK;MACZA,CAAC,CAACC,cAAc,EAAE,CAAA;MAClBd,QAAQ,CAACe,OAAO,CAAC,YAAY,EAAEX,KAAgB,CAACC,OAAO,CAAC,CAAA;AAC1D,KAAA;AACF,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACMW,MAAAA,gBAAgB,GAAG,CAAC;AAAEjB,EAAAA,QAAQ,EAARA,QAAQ;AAAEC,EAAAA,QAAQ,EAARA,QAAAA;AAAS,CAAC,KAAK;AACnD;AACA;EACA,MAAMiB,oBAAoB,GAAG,GAAG,CAAA;EAEhC,MAAMC,uBAAuB,GAC3BlB,QAAQ,CAACE,GAAG,CAAC,cAAc,CAAC,CAAC/B,MAAM,CAACgC,GAAG,IAAIA,GAAG,CAACtC,IAAI,KAAKuC,KAAgB,CAACe,YAAY,CAAC,CAAA;AAExF,EAAA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,uBAAuB,CAAC,EAAE;AAC3C,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;;AAEA;AACA,EAAA,MAAMI,SAAS,GAAGxB,eAAe,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CAAA;;AAErD;AACA,EAAA,MAAMuB,UAAU,GAAGL,uBAAuB,CAAC3D,GAAG,CAACiE,SAAS,IAAI;AAAA,IAAA,IAAA,eAAA,CAAA;IAC1D,IAAI7B,IAAI,sBAAG6B,SAAS,CAAC7B,IAAI,MAAd,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,eAAA,CAAgB8B,WAAW,EAAE,CAAA;AACxC,IAAA,IAAIC,WAAW,CAAA;IAEf,IAAI,CAAC9B,cAAC,CAAC+B,QAAQ,CAACC,GAAG,CAACC,qBAAqB,EAAElC,IAAI,CAAC,EAAE;AAAA,MAAA,IAAA,cAAA,CAAA;AAChDA,MAAAA,IAAI,GAAG,aAAa,CAAA;AACpB;AACA+B,MAAAA,WAAW,GAAGf,GAAG,CAAC,+BAA+B,EAAE,OAAO,EAAE,CAACa,CAAAA,cAAAA,GAAAA,SAAS,CAACrB,GAAG,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,cAAetC,CAAAA,IAAI,CAAC,CAAC,CAAA;AACpF,KAAC,MAAM;MACL6D,WAAW,GAAGf,GAAG,CAAE,CAAA,WAAA,EAAahB,IAAK,CAAO,MAAA,CAAA,EAAE,OAAO,CAAC,CAAA;AACxD,KAAA;IAEA,MAAMmC,UAAU,GAAG,CACjB,oBAAoB,EACnB,CAAcnC,YAAAA,EAAAA,IAAK,SAAQ,CAC7B,CAAA;IAED,IAAIA,IAAI,KAAK,aAAa,EAAE;AAC1BmC,MAAAA,UAAU,CAACC,IAAI,CAAC,cAAc,CAAC,CAAA;AACjC,KAAA;AAEA,IAAA,IAAIP,SAAS,CAACrB,GAAG,CAACK,SAAS,EAAE;MAC3BsB,UAAU,CAACC,IAAI,CAACP,SAAS,CAACrB,GAAG,CAACK,SAAS,CAAC,CAAA;AAC1C,KAAA;AAEA,IAAA,MAAMwB,MAAoB,GAAG;AAC3BvB,MAAAA,UAAU,EAAE;QACV,SAAS,EAAG,eAAcd,IAAK,CAAA,OAAA,CAAA;OAChC;AACDa,MAAAA,SAAS,EAAEsB,UAAU,CAACG,IAAI,CAAC,GAAG,CAAC;AAC/BvB,MAAAA,KAAK,EAAEgB,WAAW;MAClBQ,IAAI,EAAEV,SAAS,CAACU,IAAAA;KACjB,CAAA;AAED,IAAA,IAAI/F,iBAAiB,CAACuF,WAAW,EAAET,oBAAoB,CAAC,EAAE;AACxD;AACAe,MAAAA,MAAM,CAACvB,UAAU,CAACC,KAAK,GAAGgB,WAAW,CAAA;AACvC,KAAA;AAEA,IAAA,OAAOM,MAAM,CAAA;AACf,GAAC,CAAC,CAAA;AAEF,EAAA,OAAO,CAAC,GAAGV,SAAS,EAAE,GAAGC,UAAU,CAAC,CAAA;AACtC,EAAC;AAEKY,MAAAA,mBAAmB,GAAIpC,QAAQ,IAAK;AACxC,EAAA,MAAMqC,aAAa,GAAGrC,QAAQ,CAACG,GAAG,CAAC,eAAe,CAAC,CAAA;AACnD,EAAA,OAAOkC,aAAa,CAAC7E,GAAG,CAAC8E,YAAY,IAAI;AACvC,IAAA,MAAML,MAAM,GAAG;AACbvB,MAAAA,UAAU,EAAE;QACV,SAAS,EAAE4B,YAAY,CAACC,QAAAA;OACzB;AACD9B,MAAAA,SAAS,EAAE6B,YAAY,CAAC7B,SAAS,GAAG,wBAAwB;AAC5DE,MAAAA,KAAK,EAAE2B,YAAY,CAAC3B,KAAK,IAAIC,GAAG,CAAC0B,YAAY,CAACE,OAAO,EAAE,OAAO,CAAC;MAC/D3B,KAAK,EAAEyB,YAAY,CAACzB,KAAAA;KACrB,CAAA;AACD,IAAA,OAAOoB,MAAM,CAAA;AACf,GAAC,CAAC,CAAA;AACJ,EAAC;AAEKQ,MAAAA,eAAe,GAAIC,oBAAoB,IAAK;AAChD,EAAA,OAAOC,YAAY,CAAC;AAClB,IAAA,GAAGD,oBAAoB;AACvBjC,IAAAA,SAAS,EAAG,CAAA,EAAEiC,oBAAoB,CAACjC,SAAU,CAAA,qCAAA,CAAA;AAC/C,GAAC,CAAC,CAAA;AACJ;;;;"}