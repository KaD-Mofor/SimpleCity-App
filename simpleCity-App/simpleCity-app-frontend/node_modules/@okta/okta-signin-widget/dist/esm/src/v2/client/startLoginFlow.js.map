{"version":3,"file":"startLoginFlow.js","sources":["../../../../../src/v2/client/startLoginFlow.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { ConfiguredFlowError, ConfigError } from 'util/Errors';\nimport { emailVerifyCallback } from './emailVerifyCallback';\nimport sessionStorageHelper from './sessionStorageHelper';\nimport { CONFIGURED_FLOW } from './constants';\nimport { IdxTransactionMeta, ProceedOptions } from '@okta/okta-auth-js';\n\nconst handleProxyIdxResponse = async (settings) => {\n  return Promise.resolve({\n    rawIdxState: settings.get('proxyIdxResponse'),\n    context: settings.get('proxyIdxResponse'),\n    neededToProceed: [],\n  });\n};\n\n/* eslint max-depth: [2, 3] */\n// eslint-disable-next-line complexity, max-statements\nexport async function startLoginFlow(settings) {\n  const authClient = settings.getAuthClient();\n  // nonce is not a top-level auth-js option, must be passed in manually\n  const { authParams } = settings.toJSON({verbose: true});\n  const nonce = settings.get('nonce') || authParams?.nonce;\n  const idxOptions: ProceedOptions = {\n    exchangeCodeForTokens: false, // we handle this in interactionCodeFlow.js\n    ...(nonce && { nonce })\n  };\n\n  // Return a preset response\n  if (settings.get('proxyIdxResponse')) {\n    return handleProxyIdxResponse(settings);\n  }\n\n  if (settings.get('overrideExistingStateToken')) {\n    sessionStorageHelper.removeStateHandle();\n  }\n\n  if (settings.get('otp')) {\n    return emailVerifyCallback(settings);\n  }\n\n  if (settings.get('oauth2Enabled')) {\n    const meta: IdxTransactionMeta = await authClient.idx.getSavedTransactionMeta();\n    if (!meta) {\n      // no saved transaction\n      // if the configured flow is set to `proceed`, the SIW should only continue an existing idx transaction\n      // if the SIW loads from a fresh state (there is no current transaction), throw an error\n      const flow = authClient.idx.getFlow();\n      if (flow && flow === CONFIGURED_FLOW.PROCEED) {\n        throw new ConfiguredFlowError(\n          'Unable to proceed: saved transaction could not be loaded', flow\n        );\n      }\n      // start new transaction\n      return authClient.idx.start(idxOptions); // calls interact\n    }\n\n    // continue saved transaction\n    return authClient.idx.proceed(idxOptions); // calls introspect\n  }\n\n  // Use stateToken from session storage if exists\n  // See more details at ./docs/use-session-token-prior-to-settings.png\n  const stateHandleFromSession = sessionStorageHelper.getStateHandle();\n  if (stateHandleFromSession) {\n    try {\n      const idxResp = await authClient.idx.start({\n        ...idxOptions,\n        stateHandle: stateHandleFromSession\n      });\n      const hasError = idxResp.context?.messages?.value.length > 0;\n      if (hasError) {\n        throw new Error('saved stateToken is invalid'); // will be caught in this function\n      }\n\n      // 1. abandon the settings.stateHandle given session.stateHandle is still valid\n      settings.set('stateToken', stateHandleFromSession);\n      // 2. chain the idxResp to next handler\n      return idxResp;\n    } catch {\n      // 1. remove session.stateHandle\n      sessionStorageHelper.removeStateHandle();\n      // 2. start the login again in order to introspect on settings.stateHandle\n      return startLoginFlow(settings);\n    }\n  }\n\n  // Use stateToken from options\n  const stateHandle = settings.get('stateToken');\n  if (stateHandle) {\n    return authClient.idx.start({\n      ...idxOptions,\n      stateHandle\n    });\n  }\n\n  throw new ConfigError('Invalid OIDC configuration. Set \"clientId\" and \"redirectUri\" in the widget options.');\n}\n"],"names":["handleProxyIdxResponse","settings","Promise","resolve","rawIdxState","get","context","neededToProceed","startLoginFlow","authClient","getAuthClient","authParams","toJSON","verbose","nonce","idxOptions","exchangeCodeForTokens","sessionStorageHelper","removeStateHandle","emailVerifyCallback","meta","idx","getSavedTransactionMeta","flow","getFlow","CONFIGURED_FLOW","PROCEED","ConfiguredFlowError","start","proceed","stateHandleFromSession","getStateHandle","idxResp","stateHandle","hasError","messages","value","length","Error","set","ConfigError"],"mappings":"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"}