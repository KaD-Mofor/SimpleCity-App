{"version":3,"file":"ChallengeOktaVerifyFastPassView.js","sources":["../../../../../../../src/v2/view-builder/views/ov/ChallengeOktaVerifyFastPassView.js"],"sourcesContent":["import { _, createCallout } from '@okta/courage';\nimport { BaseOktaVerifyChallengeView } from '../../internals';\nimport { getBiometricsErrorOptions } from '../../utils/ChallengeViewUtil';\n\nconst Body = BaseOktaVerifyChallengeView.extend({\n  getDeviceChallengePayload() {\n    return this.options.currentViewState.relatesTo.value.contextualData.challenge.value;\n  },\n\n  showCustomFormErrorCallout(error) {\n    const options = getBiometricsErrorOptions(error, false);\n    \n    // If not biometrics error, just show the returned error message\n    if (_.isEmpty(options)) {\n      return false;\n    }\n\n    this.showMessages(createCallout(options));\n    return true;\n  },\n});\n\nexport default Body;\n"],"names":["Body","BaseOktaVerifyChallengeView","extend","getDeviceChallengePayload","options","currentViewState","relatesTo","value","contextualData","challenge","showCustomFormErrorCallout","error","getBiometricsErrorOptions","_","isEmpty","showMessages","createCallout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAMA,IAAI,GAAGC,MAA2B,CAACC,MAAM,CAAC;AAC9CC,EAAAA,yBAAyB,EAAG,YAAA;AAC1B,IAAA,OAAO,IAAI,CAACC,OAAO,CAACC,gBAAgB,CAACC,SAAS,CAACC,KAAK,CAACC,cAAc,CAACC,SAAS,CAACF,KAAK,CAAA;GACpF;EAEDG,0BAA0B,EAAA,UAACC,KAAK,EAAE;AAChC,IAAA,MAAMP,OAAO,GAAGQ,yBAAyB,CAACD,KAAK,EAAE,KAAK,CAAC,CAAA;;AAEvD;AACA,IAAA,IAAIE,cAAC,CAACC,OAAO,CAACV,OAAO,CAAC,EAAE;AACtB,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AAEA,IAAA,IAAI,CAACW,YAAY,CAACC,aAAa,CAACZ,OAAO,CAAC,CAAC,CAAA;AACzC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AACF,CAAC;;;;"}