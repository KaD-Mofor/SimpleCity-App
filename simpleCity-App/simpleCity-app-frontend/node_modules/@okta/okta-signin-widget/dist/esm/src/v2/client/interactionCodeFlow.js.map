{"version":3,"file":"interactionCodeFlow.js","sources":["../../../../../src/v2/client/interactionCodeFlow.js"],"sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport Enums from 'util/Enums';\nimport { ConfigError } from 'util/Errors';\nimport { toQueryString } from '@okta/okta-auth-js';\nimport { getTypedOAuthError, RecoverableError } from 'util/OAuthErrors';\n\n// eslint-disable-next-line max-statements\nexport async function interactionCodeFlow(settings, idxResponse) {\n  const { interactionCode } = idxResponse;\n  const authClient = settings.getAuthClient();\n  const transactionMeta = await authClient.idx.getSavedTransactionMeta();\n  const state = authClient.options.state || transactionMeta?.state;\n\n  // In remediation mode the transaction is owned by another client.\n  const isRemediationMode = settings.get('mode') === 'remediation';\n  if (isRemediationMode) {\n    authClient.idx.clearTransactionMeta();\n  }\n  \n  // server-side applications will want to received interaction_code as a query parameter\n  // this option can also be used to force a redirect for client-side/SPA applications\n  const shouldRedirect = settings.get('redirect') === 'always';\n  if (shouldRedirect) {\n    const redirectUri = settings.get('redirectUri');\n    if (!redirectUri) {\n      throw new ConfigError('\"redirectUri\" is required');\n    }\n    const qs = toQueryString({ 'interaction_code': interactionCode, state });\n    window.location.assign(redirectUri + qs);\n    return;\n  }\n  \n  // Return a promise (or call success callback) to client-side apps in remediation mode.\n  if (isRemediationMode) {\n    settings.callGlobalSuccess(Enums.SUCCESS, {\n      'interaction_code': interactionCode,\n      state\n    });\n    return;\n  }\n\n  // Operating in \"relying-party\" mode. The widget owns this transaction.\n  // Complete the transaction client-side and call success/resolve promise\n  if (!transactionMeta) {\n    throw new ConfigError('Could not load transaction data from storage');\n  }\n  const { codeVerifier } = transactionMeta;\n  return authClient.token.exchangeCodeForTokens({ codeVerifier, interactionCode })\n    .then(({ tokens }) => {\n      settings.callGlobalSuccess(Enums.SUCCESS, { tokens });\n    })\n    .catch(err => {\n      const typedError = getTypedOAuthError(err);\n      if (typedError instanceof RecoverableError && typedError.is('terminal')) {\n        throw typedError;\n      }\n      settings.callGlobalError(err);\n    })\n    .finally(() => {\n      // clear all meta related to this transaction\n      authClient.idx.clearTransactionMeta();\n    });\n}\n"],"names":["interactionCodeFlow","settings","idxResponse","interactionCode","authClient","getAuthClient","transactionMeta","idx","getSavedTransactionMeta","state","options","isRemediationMode","get","clearTransactionMeta","shouldRedirect","redirectUri","ConfigError","qs","toQueryString","window","location","assign","callGlobalSuccess","Enums","SUCCESS","codeVerifier","token","exchangeCodeForTokens","then","tokens","catch","err","typedError","getTypedOAuthError","RecoverableError","is","callGlobalError","finally"],"mappings":"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"}