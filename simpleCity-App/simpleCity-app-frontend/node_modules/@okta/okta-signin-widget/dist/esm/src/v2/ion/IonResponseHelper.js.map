{"version":3,"file":"IonResponseHelper.js","sources":["../../../../../src/v2/ion/IonResponseHelper.js"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport _ from 'underscore';\nimport { getMessage, getMessageKey } from './i18nUtils';\n\nconst convertErrorMessageToErrorSummary = (formName, remediationValues = []) => {\n  return _.chain(remediationValues)\n    .filter(field => {\n      return Array.isArray(field.messages?.value) && field.messages.value.length;\n    })\n    .map(field => {\n      return {\n        property: formName ? `${formName}.${field.name}` : field.name,\n        errorSummary: field.messages.value.map(getMessage),\n        errorKey: field.messages.value.map(getMessageKey),\n      };\n    })\n    .value();\n};\n\n/**\n * Although time complexity is O(n^2),\n * the `array` is actually very small (size < 5),\n * hence performance doesn't matter.\n */\nconst uniqWith = (array, comparator) => {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n  if (!_.isFunction(comparator) || array.length === 1) {\n    return array;\n  }\n\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    let seen = false;\n    for (let j = i + 1; j < array.length; j++) {\n      /* eslint max-depth: [2, 3] */\n      if (comparator(array[i], array[j])) {\n        seen = true;\n        break;\n      }\n    }\n    if (!seen) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n};\n\n/**\n * returns errors\n * @example\n * errors = [\n *   {property : fieldName1, errorSummary: [errorMessage1]},\n *   {property : fieldName2, errorSummary: [errorMessage2]}\n *   {property : fieldName3, errorSummary: [errorMessage31, errorMessage32]}\n * ]\n */\nconst getRemediationErrors = (res) => {\n  let errors = [];\n\n  if (!res.remediation || !Array.isArray(res.remediation.value) || res.remediation.value.length === 0) {\n    return errors;\n  }\n  let remediationFormFields = res.remediation.value[0].value;\n\n  if (!Array.isArray(remediationFormFields)) {\n    return errors;\n  }\n\n  // error at field\n  errors.push(convertErrorMessageToErrorSummary(null, remediationFormFields));\n\n  _.each(remediationFormFields, (remediationForm) => {\n    const formName = remediationForm.name;\n\n    // error at form.value\n    if (Array.isArray(remediationForm.form?.value)) {\n      errors.push(convertErrorMessageToErrorSummary(formName, remediationForm.form.value));\n    }\n\n    // error at option.value.form.value\n    if (Array.isArray(remediationForm.options)) {\n      _.each(remediationForm.options, (option) => {\n        if (Array.isArray(option.value?.form?.value)) {\n          errors.push(convertErrorMessageToErrorSummary(formName, option.value.form.value));\n        }\n      });\n    }\n  });\n\n  // API may return identical error on same field\n  // thus run through `uniqWith`.\n  // Check unit test for details.\n  return uniqWith(_.flatten(errors), _.isEqual);\n};\n\n/**\n * return global error summary combined into one string\n * allErrors = 'error string1. error string2'\n */\nconst getGlobalErrors = (res) => {\n  let allErrors = [];\n\n  if (Array.isArray(res.messages?.value)) {\n    allErrors = res.messages.value.map(getMessage);\n  }\n\n  return allErrors.join('. ');\n};\n\n/**\n * return array of error keys\n */\nconst getGlobalErrorKeys = (res) => {\n  let allKeys = [];\n\n  if (Array.isArray(res.messages?.value)) {\n    allKeys = res.messages.value.map(getMessageKey);\n  }\n\n  return allKeys;\n};\n\nconst convertFormErrors = (response) => {\n  let errors = {\n    errorCauses: getRemediationErrors(response),\n    errorSummary: getGlobalErrors(response),\n    errorSummaryKeys: getGlobalErrorKeys(response),\n    errorIntent: response.intent,\n  };\n\n  return {\n    responseJSON: errors\n  };\n};\n\nconst isIonErrorResponse = (response = {}) => {\n  // check if error format is an ION response by looking for version attribute.\n  // a little sloppy.\n  return response.version;\n};\n\nconst isIdxSessionExpiredError = (response) => {\n  const errorI18NKey = response?.context?.messages?.value[0]?.i18n?.key;\n  return errorI18NKey && errorI18NKey === 'idx.session.expired';\n};\n\nexport default {\n  convertFormErrors,\n  isIonErrorResponse,\n  isIdxSessionExpiredError\n};\n"],"names":["convertErrorMessageToErrorSummary","formName","remediationValues","_","chain","filter","field","Array","isArray","messages","value","length","map","property","name","errorSummary","getMessage","errorKey","getMessageKey","uniqWith","array","comparator","isFunction","result","i","seen","j","push","getRemediationErrors","res","errors","remediation","remediationFormFields","each","remediationForm","form","options","option","flatten","isEqual","getGlobalErrors","allErrors","join","getGlobalErrorKeys","allKeys","convertFormErrors","response","errorCauses","errorSummaryKeys","errorIntent","intent","responseJSON","isIonErrorResponse","version","isIdxSessionExpiredError","errorI18NKey","context","i18n","key"],"mappings":"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"}