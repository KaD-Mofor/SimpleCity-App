{"version":3,"file":"CryptoUtil.js","sources":["../../../../src/util/CryptoUtil.js"],"sourcesContent":["/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* global Uint8Array, atob, btoa */\n\nconst fn = {};\n\n/**\n * Light weight hashing algorithm that hashes string into an integer between 0 and 4294967295\n * Not recommended for data set of size greater than 10000\n * https://www.npmjs.com/package/string-hash\n *\n * @param str the string to be hashed\n * @returns string hash of integer type\n */\nfn.getStringHash = function(str) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0;\n};\n\n/**\n * Converts any url safe characters in a base64 string to regular base64 characters\n * @param str base64 string that might contain url safe characters\n * @returns base64 formatted string\n */\nfn.base64UrlSafeToBase64 = function(str) {\n  return str.replace(new RegExp('_', 'g'), '/').replace(new RegExp('-', 'g'), '+');\n};\n\n/**\n * Converts an ArrayBuffer object that contains binary data to base64 encoded string\n * @param bin ArrayBuffer object\n * @returns base64 encoded string\n */\nfn.binToStr = function(bin) {\n  return btoa(new Uint8Array(bin).reduce((s, byte) => s + String.fromCharCode(byte), ''));\n};\n\n/**\n * Converts base64 string to binary data view\n * @param str in base64 or base64UrlSafe format\n * @returns converted Uint8Array view of binary data\n */\nfn.strToBin = function(str) {\n  return Uint8Array.from(atob(this.base64UrlSafeToBase64(str)), c => c.charCodeAt(0));\n};\n\nexport default fn;\n"],"names":["fn","getStringHash","str","hash","i","length","charCodeAt","base64UrlSafeToBase64","replace","RegExp","binToStr","bin","btoa","Uint8Array","reduce","s","byte","String","fromCharCode","strToBin","from","atob","c"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEMA,MAAAA,EAAE,GAAG,GAAE;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,aAAa,GAAG,UAASC,GAAG,EAAE;EAC/B,IAAIC,IAAI,GAAG,IAAI,CAAA;AACf,EAAA,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAM,CAAA;AAElB,EAAA,OAAOD,CAAC,EAAE;IACRD,IAAI,GAAIA,IAAI,GAAG,EAAE,GAAID,GAAG,CAACI,UAAU,CAAC,EAAEF,CAAC,CAAC,CAAA;AAC1C,GAAA;EACA,OAAOD,IAAI,KAAK,CAAC,CAAA;AACnB,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACAH,EAAE,CAACO,qBAAqB,GAAG,UAASL,GAAG,EAAE;EACvC,OAAOA,GAAG,CAACM,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAACD,OAAO,CAAC,IAAIC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;AAClF,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACAT,EAAE,CAACU,QAAQ,GAAG,UAASC,GAAG,EAAE;EAC1B,OAAOC,IAAI,CAAC,IAAIC,UAAU,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,EAAEC,IAAI,KAAKD,CAAC,GAAGE,MAAM,CAACC,YAAY,CAACF,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;AACzF,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACAhB,EAAE,CAACmB,QAAQ,GAAG,UAASjB,GAAG,EAAE;EAC1B,OAAOW,UAAU,CAACO,IAAI,CAACC,IAAI,CAAC,IAAI,CAACd,qBAAqB,CAACL,GAAG,CAAC,CAAC,EAAEoB,CAAC,IAAIA,CAAC,CAAChB,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;AACrF,CAAC;;;;"}