{"version":3,"file":"handleConfiguredFlow.js","sources":["../../../../../src/v2/client/handleConfiguredFlow.js"],"sourcesContent":["/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// This file attempts to mimic the behavior of a popular hack of the V1 Router, which allowed for the widget to be\n// initialized into a specific form/flow (like Register or Reset Password). To achieve this, an attempt is made to\n// call `idxState.proceed()` with a known remediation depending on the `flow` configuration to \"step\" the widget\n// (and the server's state) to the desired flow/form. The remediation is not guaranteed to be available \n// and will default to the original idx response otherwise. This depends on the Org configurations\nimport { ConfigError } from 'util/Errors';\nimport Logger from 'util/Logger';\nimport { FORMS } from '../ion/RemediationConstants';\nimport { CONFIGURED_FLOW } from './constants';\n\n\n// checks if \"desired\" remeidation is available before calling `.proceed`\n// if not available, returns original idxResponse (and logs warning)\nasync function proceedIfAvailable(idxState, remediation, flow) {\n  const rem = idxState.neededToProceed.find(item => item.name === remediation);\n  if (!rem) {\n    Logger.warn('Expected remediation not found, Org may be misconfigured for this flow');\n    return idxState;\n  }\n\n  try {\n    const nextIdxState = await idxState.proceed(remediation);\n    return nextIdxState;\n  }\n  catch (err) {\n    // catches and handles `Unknown remediation` errors thrown okta-idx-js\n    if (typeof err === 'string' && err.startsWith('Unknown remediation choice')) {\n      Logger.warn(`flow [${flow}] not valid with current Org configurations`);\n      return idxState;\n    }\n    else {\n      // do not catch non-`Unknown remediation` errors here\n      throw err;\n    }\n  }\n}\n\n// attempts to \"step into\" a specific flow by calling `.proceed` with a specific remeidation (or calls an action)\n// the \"desired\" remeidation is not guaranteed to be available, depends upon Org configurations\nasync function stepIntoSpecificIdxFlow(idxState, flow='default') {\n  switch (flow) {\n  case CONFIGURED_FLOW.DEFAULT:\n  case CONFIGURED_FLOW.PROCEED:\n  case CONFIGURED_FLOW.LOGIN:\n    // default IDX response from interact is \"Login\" page/flow. Do nothing\n    return idxState;\n\n  // step logic is handled by auth-js\n  case CONFIGURED_FLOW.REGISTRATION:\n  case CONFIGURED_FLOW.RESET_PASSWORD:\n    return idxState;\n\n  case CONFIGURED_FLOW.UNLOCK_ACCOUNT:\n    // requires: introspect -> identify-recovery -> select-authenticator-unlock-account\n    return await proceedIfAvailable(idxState, FORMS.UNLOCK_ACCOUNT, flow);\n\n  default:\n    Logger.warn(`Unknown \\`flow\\` value: ${flow}`);\n    throw new ConfigError('Invalid \"flow\" configuration');\n  }\n}\n\n// ensures the `flow` stored in the transaction meta matches the flow configuration\n// if they do not match, abandon the current (meta) flow and start a new (configured) flow\nexport async function handleConfiguredFlow(originalResp, settings) {\n  const authClient = settings.getAuthClient();\n  const configuredFlow = authClient.idx.getFlow();\n\n  // attempts to step into the desired flow\n  const idxState = await stepIntoSpecificIdxFlow(originalResp, configuredFlow);\n  return idxState;\n}\n"],"names":["proceedIfAvailable","idxState","remediation","flow","rem","neededToProceed","find","item","name","Logger","warn","nextIdxState","proceed","err","startsWith","stepIntoSpecificIdxFlow","CONFIGURED_FLOW","DEFAULT","PROCEED","LOGIN","REGISTRATION","RESET_PASSWORD","UNLOCK_ACCOUNT","FORMS","ConfigError","handleConfiguredFlow","originalResp","settings","authClient","getAuthClient","configuredFlow","idx","getFlow"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA,eAAeA,kBAAkB,CAACC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,EAAE;AAC7D,EAAA,MAAMC,GAAG,GAAGH,QAAQ,CAACI,eAAe,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKN,WAAW,CAAC,CAAA;EAC5E,IAAI,CAACE,GAAG,EAAE;AACRK,IAAAA,MAAM,CAACC,IAAI,CAAC,wEAAwE,CAAC,CAAA;AACrF,IAAA,OAAOT,QAAQ,CAAA;AACjB,GAAA;EAEA,IAAI;IACF,MAAMU,YAAY,GAAG,MAAMV,QAAQ,CAACW,OAAO,CAACV,WAAW,CAAC,CAAA;AACxD,IAAA,OAAOS,YAAY,CAAA;GACpB,CACD,OAAOE,GAAG,EAAE;AACV;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,UAAU,CAAC,4BAA4B,CAAC,EAAE;AAC3EL,MAAAA,MAAM,CAACC,IAAI,CAAE,CAAQP,MAAAA,EAAAA,IAAK,6CAA4C,CAAC,CAAA;AACvE,MAAA,OAAOF,QAAQ,CAAA;AACjB,KAAC,MACI;AACH;AACA,MAAA,MAAMY,GAAG,CAAA;AACX,KAAA;AACF,GAAA;AACF,CAAA;;AAEA;AACA;AACA,eAAeE,uBAAuB,CAACd,QAAQ,EAAEE,IAAI,GAAC,SAAS,EAAE;AAC/D,EAAA,QAAQA,IAAI;IACZ,KAAKa,eAAe,CAACC,OAAO,CAAA;IAC5B,KAAKD,eAAe,CAACE,OAAO,CAAA;IAC5B,KAAKF,eAAe,CAACG,KAAK;AACxB;AACA,MAAA,OAAOlB,QAAQ,CAAA;;AAEjB;IACA,KAAKe,eAAe,CAACI,YAAY,CAAA;IACjC,KAAKJ,eAAe,CAACK,cAAc;AACjC,MAAA,OAAOpB,QAAQ,CAAA;IAEjB,KAAKe,eAAe,CAACM,cAAc;AACjC;MACA,OAAO,MAAMtB,kBAAkB,CAACC,QAAQ,EAAEsB,KAAK,CAACD,cAAc,EAAEnB,IAAI,CAAC,CAAA;AAEvE,IAAA;AACEM,MAAAA,MAAM,CAACC,IAAI,CAAE,CAA0BP,wBAAAA,EAAAA,IAAK,EAAC,CAAC,CAAA;AAC9C,MAAA,MAAM,IAAIqB,WAAW,CAAC,8BAA8B,CAAC,CAAA;AAAC,GAAA;AAE1D,CAAA;;AAEA;AACA;AACO,eAAeC,oBAAoB,CAACC,YAAY,EAAEC,QAAQ,EAAE;AACjE,EAAA,MAAMC,UAAU,GAAGD,QAAQ,CAACE,aAAa,EAAE,CAAA;AAC3C,EAAA,MAAMC,cAAc,GAAGF,UAAU,CAACG,GAAG,CAACC,OAAO,EAAE,CAAA;;AAE/C;EACA,MAAM/B,QAAQ,GAAG,MAAMc,uBAAuB,CAACW,YAAY,EAAEI,cAAc,CAAC,CAAA;AAC5E,EAAA,OAAO7B,QAAQ,CAAA;AACjB;;;;"}