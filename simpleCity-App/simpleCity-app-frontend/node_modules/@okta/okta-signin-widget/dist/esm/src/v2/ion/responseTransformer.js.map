{"version":3,"file":"responseTransformer.js","sources":["../../../../../src/v2/ion/responseTransformer.js"],"sourcesContent":["/*!\n * Copyright (c) 2020, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { _ } from '@okta/courage';\nimport { FORMS as RemediationForms, AUTHENTICATOR_KEY, IDP_FORM_TYPE } from './RemediationConstants';\n\n/**\n * Transform the ion spec response into canonical format.\n */\n\n/**\n * Authn V2 response\n * @typedef {Object} AuthnResponse\n */\n\n/**\n * @typedef {Object} AuthnResult\n * @property {Object=} user\n * @property {Object=} authenticator\n */\n\nconst isObject = x => _.isObject(x);\n\nconst isError = response => !!response.messages;\n\n/**\n * Flatten first level objects from response\n */\nconst getFirstLevelObjects = (resp) => {\n  const result = {};\n  _.each(resp, (val = {}, key) => {\n    // if key is remediation we don't do any transformation\n    if (key === 'remediation') {\n      return;\n    }\n\n    // for arrays we just want it as a top level object\n    // Example authenticators array in select-authenticator form\n    if (val.type === 'array') {\n      result[key] = {\n        value: val.value,\n      };\n    }\n\n    // for handling attributes with type object\n    if (val.type === 'object') {\n      result[key] = val.value;\n    }\n  });\n  return result;\n};\n\nconst getRemediationValues = (idx) => {\n  const remediationValues = [];\n  const hasSkipRemediationOnly =\n    idx.neededToProceed.length === 1 && idx.neededToProceed[0].name === 'skip';\n  if (_.isEmpty(idx.neededToProceed) || hasSkipRemediationOnly) {\n    // no remediation or only skip remediation with success\n    if (idx.context.success) {\n      remediationValues.push({\n        name: idx.context.success.name,\n        href: idx.context.success.href,\n        value: [],\n      });\n    } else if (idx.context.messages) {\n      // no remediation or only skip remediation with messages\n      remediationValues.push({\n        name: RemediationForms.TERMINAL,\n        // Using `value` is unnecessary as `messages` will be display via `TerminalView.showMessages`,\n        // even though might sound a little counterintuitive.\n        // The reason being is there is `BaseForm.showMessages` that is intended to handle\n        // messages generically.\n        value: [],\n      });\n    } else if (idx.context.deviceEnrollment) {\n      // no remediation or only skip remediation with messages for device enrollment state\n      // and the state is meant to be terminal state with different UI than the regular terminal view\n      remediationValues.push({\n        name: RemediationForms.DEVICE_ENROLLMENT_TERMINAL,\n        value: [],\n      });\n    }\n  }\n  return {\n    remediations: [\n      ...remediationValues,\n      ...idx.neededToProceed,\n    ]\n  };\n};\n\n/**\n * To support `idps` configuration in OIE.\n * https://github.com/okta/okta-signin-widget#openid-connect\n */\nconst injectIdPConfigButtonToRemediation = (settings, idxResp) => {\n  const widgetRemedations = idxResp.remediations;\n  const hasIdentifyRemedation = widgetRemedations.filter(r => r.name === 'identify');\n  if (hasIdentifyRemedation.length === 0) {\n    return idxResp;\n  }\n\n  const idpsConfig = settings.get('idps');\n  if (Array.isArray(idpsConfig)) {\n    const existsRedirectIdpIds = {};\n    widgetRemedations.forEach(r => {\n      if (r.name === RemediationForms.REDIRECT_IDP && r.idp) {\n        existsRedirectIdpIds[r.idp.id] = true;\n      }\n    });\n    const baseUrl = settings.get('baseUrl');\n    const stateHandle = idxResp.idx.context.stateHandle;\n    const redirectIdpRemedations = idpsConfig\n      .filter(c => !existsRedirectIdpIds[c.id]) // omit idps that are already in remediation.\n      .map(idpConfig => {\n        const idp = {\n          id: idpConfig.id,\n          name: idpConfig.text,\n        };\n        const redirectUri = `${baseUrl}/sso/idps/${idpConfig.id}?stateToken=${stateHandle}`;\n        if (idpConfig.className) {\n          idp.className = idpConfig.className;\n        }\n        return {\n          name: RemediationForms.REDIRECT_IDP,\n          type: idpConfig.type,\n          idp,\n          href: redirectUri,\n        };\n      });\n    idxResp.remediations = widgetRemedations.concat(redirectIdpRemedations);\n  }\n\n  return idxResp;\n};\n\n/**\n * IFF there is one `redirect-idp` remediation form, widget will automatically redirect to `redirect-idp.href`.\n *\n * The idea now is to reuse `success-redirect` thus converts `redirect-idp` to `success-redirect` form.\n */\nconst convertRedirectIdPToSuccessRedirectIffOneIdp = (settings, result, lastResult) => {\n  if (Array.isArray(result.remediations)) {\n    const redirectIdpRemediations = result.remediations.filter(idp => idp.name === RemediationForms.REDIRECT_IDP);\n    if (redirectIdpRemediations.length !== 1 || result.remediations.length !== 1) {\n      return;\n    }\n\n    // Direct auth clients should not redirect on the initial response\n    const isDirectAuth = settings.get('oauth2Enabled');\n    if (isDirectAuth && !lastResult) {\n      return;\n    }\n\n    const successRedirect = {\n      name: RemediationForms.SUCCESS_REDIRECT,\n      href: redirectIdpRemediations[0].href,\n      value: [],\n    };\n    result.remediations = [successRedirect];\n  }\n};\n\n/**\n * API reuses `redirect-idp` remediation form for PIV IdP and IdP Authenticator.\n * IdP Authenticator becomes outlier comparing with other Authenticators in terms of\n * using `challenge-authenticator` and `enroll-authenticator` remediation form.\n * The UX for PIV IdP is different from other idps in terms of the PIV\n * instructions view that needs to be rendered before we redirect to mtls.\n *\n * This function changes `redirect-idp` to `challenge-authenticator` or `enroll-authenticator`\n * for IdP Authenticator and changes `redirect-idp` to `piv-idp` for PIV IdP.\n */\nconst modifyFormNameForIdP = result => {\n  if (Array.isArray(result.remediations)) {\n    result.remediations.forEach(remediation => {\n      if (remediation.name === RemediationForms.REDIRECT_IDP &&\n          remediation?.relatesTo?.value?.key === AUTHENTICATOR_KEY.IDP) {\n        // idp authenticator\n        const isVerifyFlow = Object.prototype.hasOwnProperty.call(result, 'currentAuthenticatorEnrollment');\n        remediation.name = isVerifyFlow ? 'challenge-authenticator' : 'enroll-authenticator';\n      }\n      if (remediation.name === RemediationForms.REDIRECT_IDP && remediation.type === IDP_FORM_TYPE.X509) {\n        // piv idp\n        remediation.name = RemediationForms.PIV_IDP;\n      }\n    });\n  }\n};\n\nconst isFailureRedirect = (result) => {\n  const context = result.idx.context;\n  return (context.failure && context.failure.name === 'failure-redirect');\n};\n\nconst handleFailureRedirect = (settings, result) => {\n  const context = result.idx.context;\n\n  // Direct auth clients will usually prefer to display the error instead of redirecting\n  const isDirectAuth = settings.get('oauth2Enabled');\n  const alwaysRedirect = settings.get('redirect') === 'always'; // redirect option overrides default behavior\n  if (isDirectAuth && !alwaysRedirect) {\n    return;\n  }\n  \n  const failureRedirect = {\n    name: RemediationForms.FAILURE_REDIRECT,\n    href: context.failure.href,\n    value: [],\n  };\n  result.remediations = [failureRedirect];\n};\n\n/**\n * @param {Models.Settings} user configuration\n * @param {idx} idx object\n * @returns {} transformed object with flattened firstlevel objects, idx and remediations array\n * Example: {\n *  idx: {\n *    proceed: ƒ(),\n *    neededToProceed: [],\n *    actions: {cancel: ƒ()},\n *    context: {},\n *  },\n *  remediations: [],\n *  authenticators: {},\n *  authenticator: {},\n *  messages: {},\n *  deviceEnrollment: {},\n * }\n */\nconst convert = (settings, idx = {}, lastResult = null) => {\n  if (!isObject(idx.rawIdxState)) {\n    return null;\n  }\n\n  // build result object\n  const firstLevelObjects = getFirstLevelObjects(idx.rawIdxState);\n  const remediationValues = getRemediationValues(idx);\n  const result = Object.assign({},\n    firstLevelObjects,\n    remediationValues,\n    { idx }\n  );\n  \n  // transform result object\n  if (isError(result) && isFailureRedirect(result)) {\n    handleFailureRedirect(settings, result);\n  }\n\n  // Override the `result` to handle custom IdP login buttons\n  // and update the form for IdP Authenticators.\n  injectIdPConfigButtonToRemediation(settings, result);\n  modifyFormNameForIdP(result);\n\n  if (!isError(result)) { // Only redirect to the IdP if we are not in an error flow\n    convertRedirectIdPToSuccessRedirectIffOneIdp(settings, result, lastResult);\n  }\n\n  return result;\n};\n\nexport default convert;\n"],"names":["isObject","x","_","isError","response","messages","getFirstLevelObjects","resp","result","each","val","key","type","value","getRemediationValues","idx","remediationValues","hasSkipRemediationOnly","neededToProceed","length","name","isEmpty","context","success","push","href","RemediationForms","TERMINAL","deviceEnrollment","DEVICE_ENROLLMENT_TERMINAL","remediations","injectIdPConfigButtonToRemediation","settings","idxResp","widgetRemedations","hasIdentifyRemedation","filter","r","idpsConfig","get","Array","isArray","existsRedirectIdpIds","forEach","REDIRECT_IDP","idp","id","baseUrl","stateHandle","redirectIdpRemedations","c","map","idpConfig","text","redirectUri","className","concat","convertRedirectIdPToSuccessRedirectIffOneIdp","lastResult","redirectIdpRemediations","isDirectAuth","successRedirect","SUCCESS_REDIRECT","modifyFormNameForIdP","remediation","relatesTo","AUTHENTICATOR_KEY","IDP","isVerifyFlow","Object","prototype","hasOwnProperty","call","IDP_FORM_TYPE","X509","PIV_IDP","isFailureRedirect","failure","handleFailureRedirect","alwaysRedirect","failureRedirect","FAILURE_REDIRECT","convert","rawIdxState","firstLevelObjects","assign"],"mappings":"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"}