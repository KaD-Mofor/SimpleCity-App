{"version":3,"file":"TransactionManager.js","names":["createTransactionManager","TransactionManager","constructor","options","storageManager","enableSharedStorage","saveLastResponse","clear","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","clearTransactionFromSharedStorage","save","storage","obj","isTransactionMeta","muteWarning","warn","setStorage","saveTransactionToSharedStorage","exists","load","pruneSharedStorage","loadTransactionFromSharedStorage"],"sources":["../../../lib/oidc/TransactionManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { StorageProvider } from '../storage/types';\nimport {\n  TransactionMeta,\n  isTransactionMeta,\n  TransactionMetaOptions,\n  TransactionManagerOptions,\n  OAuthTransactionMeta,\n  OAuthStorageManagerInterface,\n  ClearTransactionMetaOptions,\n  TransactionManagerInterface,\n  PKCETransactionMeta\n} from './types';\nimport { warn } from '../util';\nimport {\n  clearTransactionFromSharedStorage,\n  loadTransactionFromSharedStorage,\n  pruneSharedStorage,\n  saveTransactionToSharedStorage\n} from './util/sharedStorage';\n\n\nexport function createTransactionManager\n<\n  M extends OAuthTransactionMeta = PKCETransactionMeta,\n  S extends OAuthStorageManagerInterface<M> = OAuthStorageManagerInterface<M>\n>\n()\n{\n  return class TransactionManager implements TransactionManagerInterface\n  {\n    options: TransactionManagerOptions;\n    storageManager: S;\n    enableSharedStorage: boolean;\n    saveLastResponse: boolean;\n\n    constructor(options: TransactionManagerOptions) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.storageManager = options.storageManager! as S;\n      this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n      this.saveLastResponse = options.saveLastResponse === false ? false : true;\n      this.options = options;\n    }\n\n    // eslint-disable-next-line complexity\n    clear(options: ClearTransactionMetaOptions = {}) {\n      const transactionStorage: StorageProvider = this.storageManager.getTransactionStorage();\n      const meta = transactionStorage.getStorage();\n\n      // Clear primary storage (by default, sessionStorage on browser)\n      transactionStorage.clearStorage();\n\n      // Usually we want to also clear shared storage unless another tab may need it to continue/complete a flow\n      if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n        const state = options.state || meta?.state;\n        if (state) {\n          clearTransactionFromSharedStorage(this.storageManager, state);\n        }\n      }\n    }\n\n    // eslint-disable-next-line complexity\n    save(meta: M, options: TransactionMetaOptions = {}) {\n      // There must be only one transaction executing at a time.\n      // Before saving, check to see if a transaction is already stored.\n      // An existing transaction indicates a concurrency/race/overlap condition\n\n      let storage: StorageProvider = this.storageManager.getTransactionStorage();\n      const obj = storage.getStorage();\n      // oie process may need to update transaction in the middle of process for tracking purpose\n      // false alarm might be caused \n      // TODO: revisit for a better solution, https://oktainc.atlassian.net/browse/OKTA-430919\n      if (isTransactionMeta(obj) && !options.muteWarning) {\n        // eslint-disable-next-line max-len\n        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n      }\n\n      storage.setStorage(meta);\n\n      // Shared storage allows continuation of transaction in another tab\n      if (this.enableSharedStorage && meta.state) {\n        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n      }\n    }\n\n    exists(options: TransactionMetaOptions = {}): boolean {\n      try {\n        const meta = this.load(options);\n        return !!meta;\n      } catch {\n        return false;\n      }\n    }\n\n    // load transaction meta from storage\n    // eslint-disable-next-line complexity,max-statements\n    load(options: TransactionMetaOptions = {}): TransactionMeta | null {\n\n      let meta: TransactionMeta;\n\n      // If state was passed, try loading transaction data from shared storage\n      if (this.enableSharedStorage && options.state) {\n        pruneSharedStorage(this.storageManager); // prune before load\n        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n      }\n\n      let storage: StorageProvider = this.storageManager.getTransactionStorage();\n      meta = storage.getStorage();\n      if (isTransactionMeta(meta)) {\n        // if we have meta in the new location, there is no need to go further\n        return meta;\n      }\n\n      return null;\n    }\n\n  };\n}\n"],"mappings":"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"}