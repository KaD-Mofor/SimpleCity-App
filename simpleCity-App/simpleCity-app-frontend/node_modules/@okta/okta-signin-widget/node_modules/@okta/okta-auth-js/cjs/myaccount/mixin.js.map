{"version":3,"file":"mixin.js","names":["mixinMyAccount","Base","OktaAuthMyAccount","constructor","args","myaccount","Object","entries","MyAccountMethods","filter","name","reduce","acc","fn","bind"],"sources":["../../../lib/myaccount/mixin.ts"],"sourcesContent":["import { OktaAuthConstructor } from '../base/types';\nimport {\n  OAuthStorageManagerInterface,\n  OAuthTransactionMeta,\n  OktaAuthOAuthInterface,\n  OktaAuthOAuthOptions,\n  PKCETransactionMeta,\n} from '../oidc/types';\nimport { OktaAuthMyAccountInterface } from './types';\n\nimport * as MyAccountMethods from './api';\n\nexport function mixinMyAccount\n<\n  M extends OAuthTransactionMeta = PKCETransactionMeta,\n  S extends OAuthStorageManagerInterface<M> = OAuthStorageManagerInterface<M>,\n  O extends OktaAuthOAuthOptions = OktaAuthOAuthOptions,\n  TBase extends OktaAuthConstructor<OktaAuthOAuthInterface<M, S, O>>\n    = OktaAuthConstructor<OktaAuthOAuthInterface<M, S, O>>\n>\n(Base: TBase): TBase & OktaAuthConstructor<OktaAuthMyAccountInterface<M, S, O>>\n{\n  return class OktaAuthMyAccount extends Base implements OktaAuthMyAccountInterface<M, S, O>\n  {\n    myaccount: any;\n    \n    constructor(...args: any[]) {\n      super(...args);\n\n      this.myaccount = Object.entries(MyAccountMethods)\n        .filter(([ name ]) => name !== 'default')\n        .reduce((acc, [name, fn]) => {\n          acc[name] = (fn as any).bind(null, this);\n          return acc;\n        }, {});\n    }\n  };\n}\n"],"mappings":";;;;AAUA;;;;;;AAEO,SAASA,cAAT,CAQNC,IARM,EASP;EACE,OAAO,MAAMC,iBAAN,SAAgCD,IAAhC,CACP;IAGEE,WAAW,CAAC,GAAGC,IAAJ,EAAiB;MAC1B,MAAM,GAAGA,IAAT;MAEA,KAAKC,SAAL,GAAiBC,MAAM,CAACC,OAAP,CAAeC,gBAAf,EACdC,MADc,CACP,CAAC,CAAEC,IAAF,CAAD,KAAcA,IAAI,KAAK,SADhB,EAEdC,MAFc,CAEP,CAACC,GAAD,EAAM,CAACF,IAAD,EAAOG,EAAP,CAAN,KAAqB;QAC3BD,GAAG,CAACF,IAAD,CAAH,GAAaG,EAAD,CAAYC,IAAZ,CAAiB,IAAjB,EAAuB,IAAvB,CAAZ;QACA,OAAOF,GAAP;MACD,CALc,EAKZ,EALY,CAAjB;IAMD;;EAZH,CADA;AAeD"}