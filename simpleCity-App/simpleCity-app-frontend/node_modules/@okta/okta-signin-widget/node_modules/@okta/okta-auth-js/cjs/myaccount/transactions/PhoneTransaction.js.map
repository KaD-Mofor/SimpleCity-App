{"version":3,"file":"PhoneTransaction.js","names":["PhoneTransaction","BaseTransaction","constructor","oktaAuth","options","res","accessToken","id","profile","status","_links","get","fn","generateRequestFnFromLinks","methodName","links","transactionClassName","delete","challenge","payload","verify"],"sources":["../../../../lib/myaccount/transactions/PhoneTransaction.ts"],"sourcesContent":["import { ChallengePhonePayload, PhoneProfile, Status, VerificationPayload } from '../types';\nimport BaseTransaction from './Base';\nimport { generateRequestFnFromLinks } from '../request';\n\nexport default class PhoneTransaction extends BaseTransaction {\n  id: string;\n  profile: PhoneProfile;\n  status: Status;\n\n  // eslint-disable-next-line no-use-before-define\n  get: () => Promise<PhoneTransaction>;\n  delete: () => Promise<BaseTransaction>;\n  challenge: (payload: ChallengePhonePayload) => Promise<BaseTransaction>;\n  verify?: (payload: VerificationPayload) => Promise<BaseTransaction>;\n\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n\n    const { res, accessToken } = options;\n    // assign required fields from res\n    const { id, profile, status, _links } = res;\n    this.id = id;\n    this.profile = profile;\n    this.status = status;\n\n    // assign transformed fns to transaction\n    this.get = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'get', \n        links: _links,\n        transactionClassName: 'PhoneTransaction'\n      });\n      return await fn() as PhoneTransaction;\n    };\n    this.delete = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'delete', \n        links: _links \n      });\n      return await fn() as BaseTransaction;\n    };\n    this.challenge = async (payload) => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'challenge', \n        links: _links \n      });\n      return await fn(payload) as BaseTransaction;\n    };\n    if (_links.verify) {\n      this.verify = async (payload) => {\n        const fn = generateRequestFnFromLinks({ \n          oktaAuth, \n          accessToken, \n          methodName: 'verify', \n          links: _links \n        });\n        return await fn(payload) as BaseTransaction;\n      } ;\n    }\n  }\n}\n"],"mappings":";;;;;;AACA;;AACA;;AAEe,MAAMA,gBAAN,SAA+BC,aAA/B,CAA+C;EAK5D;EAMAC,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;IAC7B,MAAMD,QAAN,EAAgBC,OAAhB;IAEA,MAAM;MAAEC,GAAF;MAAOC;IAAP,IAAuBF,OAA7B,CAH6B,CAI7B;;IACA,MAAM;MAAEG,EAAF;MAAMC,OAAN;MAAeC,MAAf;MAAuBC;IAAvB,IAAkCL,GAAxC;IACA,KAAKE,EAAL,GAAUA,EAAV;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd,CAR6B,CAU7B;;IACA,KAAKE,GAAL,GAAW,YAAY;MACrB,MAAMC,EAAE,GAAG,IAAAC,mCAAA,EAA2B;QACpCV,QADoC;QAEpCG,WAFoC;QAGpCQ,UAAU,EAAE,KAHwB;QAIpCC,KAAK,EAAEL,MAJ6B;QAKpCM,oBAAoB,EAAE;MALc,CAA3B,CAAX;MAOA,OAAO,MAAMJ,EAAE,EAAf;IACD,CATD;;IAUA,KAAKK,MAAL,GAAc,YAAY;MACxB,MAAML,EAAE,GAAG,IAAAC,mCAAA,EAA2B;QACpCV,QADoC;QAEpCG,WAFoC;QAGpCQ,UAAU,EAAE,QAHwB;QAIpCC,KAAK,EAAEL;MAJ6B,CAA3B,CAAX;MAMA,OAAO,MAAME,EAAE,EAAf;IACD,CARD;;IASA,KAAKM,SAAL,GAAiB,MAAOC,OAAP,IAAmB;MAClC,MAAMP,EAAE,GAAG,IAAAC,mCAAA,EAA2B;QACpCV,QADoC;QAEpCG,WAFoC;QAGpCQ,UAAU,EAAE,WAHwB;QAIpCC,KAAK,EAAEL;MAJ6B,CAA3B,CAAX;MAMA,OAAO,MAAME,EAAE,CAACO,OAAD,CAAf;IACD,CARD;;IASA,IAAIT,MAAM,CAACU,MAAX,EAAmB;MACjB,KAAKA,MAAL,GAAc,MAAOD,OAAP,IAAmB;QAC/B,MAAMP,EAAE,GAAG,IAAAC,mCAAA,EAA2B;UACpCV,QADoC;UAEpCG,WAFoC;UAGpCQ,UAAU,EAAE,QAHwB;UAIpCC,KAAK,EAAEL;QAJ6B,CAA3B,CAAX;QAMA,OAAO,MAAME,EAAE,CAACO,OAAD,CAAf;MACD,CARD;IASD;EACF;;AA7D2D"}