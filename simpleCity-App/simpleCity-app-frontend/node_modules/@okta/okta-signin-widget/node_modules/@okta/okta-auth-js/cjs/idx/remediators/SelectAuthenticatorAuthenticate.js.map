{"version":3,"file":"SelectAuthenticatorAuthenticate.js","names":["SelectAuthenticatorAuthenticate","SelectAuthenticator","constructor","remediation","values","options","isRecoveryFlow","flow","hasPasswordInOptions","getAuthenticatorFromRemediation","some","relatesTo","key","AuthenticatorKey","OKTA_PASSWORD","password","authenticators"],"sources":["../../../../lib/idx/remediators/SelectAuthenticatorAuthenticate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { getAuthenticatorFromRemediation } from './util';\nimport { IdxRemediation } from '../types/idx-js';\nimport { AuthenticatorKey, Authenticator, RemediateOptions } from '../types';\n\nexport type SelectAuthenticatorAuthenticateValues = SelectAuthenticatorValues & {\n  password?: string;\n};\n\nexport class SelectAuthenticatorAuthenticate extends SelectAuthenticator<SelectAuthenticatorAuthenticateValues> {\n  static remediationName = 'select-authenticator-authenticate';\n\n  constructor(\n    remediation: IdxRemediation, \n    values: SelectAuthenticatorValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // Preset password authenticator to trigger recover action\n    const isRecoveryFlow = this.options.flow === 'recoverPassword';\n    const hasPasswordInOptions = getAuthenticatorFromRemediation(remediation)\n      .options?.some(({ relatesTo }) => relatesTo?.key === AuthenticatorKey.OKTA_PASSWORD);\n    if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n      this.values.authenticators = [\n        ...this.values.authenticators || [],\n        { key: AuthenticatorKey.OKTA_PASSWORD }\n      ] as Authenticator[];\n    }\n  }\n}\n"],"mappings":";;;;;;;;AAaA;;AACA;;AAEA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYO,MAAMA,+BAAN,SAA8CC,wCAA9C,CAAyG;EAG9GC,WAAW,CACTC,WADS,EAETC,MAAiC,GAAG,EAF3B,EAGTC,OAAyB,GAAG,EAHnB,EAIT;IAAA;;IACA,MAAMF,WAAN,EAAmBC,MAAnB,EAA2BC,OAA3B,EADA,CAGA;;IACA,MAAMC,cAAc,GAAG,KAAKD,OAAL,CAAaE,IAAb,KAAsB,iBAA7C;IACA,MAAMC,oBAAoB,4BAAG,IAAAC,qCAAA,EAAgCN,WAAhC,EAC1BE,OADuB,0DAAG,sBACjBK,IADiB,CACZ,CAAC;MAAEC;IAAF,CAAD,KAAmB,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,GAAX,MAAmBC,uBAAA,CAAiBC,aAD3C,CAA7B;;IAEA,IAAIN,oBAAoB,KAAKF,cAAc,IAAI,KAAKF,MAAL,CAAYW,QAAnC,CAAxB,EAAsE;MACpE,KAAKX,MAAL,CAAYY,cAAZ,GAA6B,CAC3B,IAAG,KAAKZ,MAAL,CAAYY,cAAZ,IAA8B,EAAjC,CAD2B,EAE3B;QAAEJ,GAAG,EAAEC,uBAAA,CAAiBC;MAAxB,CAF2B,CAA7B;IAID;EACF;;AApB6G;;;8BAAnGd,+B,qBACc,mC"}