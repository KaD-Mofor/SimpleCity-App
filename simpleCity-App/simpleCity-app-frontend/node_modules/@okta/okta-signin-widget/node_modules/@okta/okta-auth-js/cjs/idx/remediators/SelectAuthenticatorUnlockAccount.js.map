{"version":3,"file":"SelectAuthenticatorUnlockAccount.js","names":["SelectAuthenticatorUnlockAccount","SelectAuthenticator","identifier","canRemediate","getData","mapAuthenticator","remediationValue","authenticatorMap","methodTypeOption","selectedOption","value","form","find","name","methodTypeValue","values","methodType","options","getInputUsername","type"],"sources":["../../../../lib/idx/remediators/SelectAuthenticatorUnlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { Authenticator } from '../types';\nimport { IdxRemediationValue } from '../types/idx-js';\n\n\nexport type SelectAuthenticatorUnlockAccountValues = SelectAuthenticatorValues & {\n  identifier?: string;\n  methodType?: string;\n};\n\nexport class SelectAuthenticatorUnlockAccount extends SelectAuthenticator<SelectAuthenticatorUnlockAccountValues> {\n  static remediationName = 'select-authenticator-unlock-account';\n  authenticator?: Authenticator;\n\n  map = {\n    identifier: ['username']\n  };\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = this.selectedOption?.value.form.value.find(({ name }) => name === 'methodType');\n\n    // defaults to 'manually defined' value\n    // 2nd: option may have pre-defined value, like stateHandle\n    // 3rd: if only a single OV option is available, default to that option\n    const methodTypeValue = this.values.methodType ||\n      methodTypeOption?.value as string || methodTypeOption?.options?.[0]?.value as string;\n\n    if (methodTypeValue) {\n      return {\n        ...authenticatorMap,\n        methodType: methodTypeValue\n      };\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername () {\n    return { name: 'username', type: 'string' };\n  }\n\n}\n"],"mappings":";;;;;;;;AAaA;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAMA,gCAAN,SAA+CC,wCAA/C,CAA2G;EAAA;IAAA;IAAA,2CAI1G;MACJC,UAAU,EAAE,CAAC,UAAD;IADR,CAJ0G;EAAA;;EAQhHC,YAAY,GAAG;IACb,MAAMD,UAAU,GAAG,KAAKE,OAAL,CAAa,YAAb,CAAnB;IACA,OAAO,CAAC,CAACF,UAAF,IAAgB,MAAMC,YAAN,EAAvB;EACD;;EAEDE,gBAAgB,CAACC,gBAAD,EAAwC;IAAA;;IACtD,MAAMC,gBAAgB,GAAG,MAAMF,gBAAN,CAAuBC,gBAAvB,CAAzB;IACA,MAAME,gBAAgB,2BAAG,KAAKC,cAAR,yDAAG,qBAAqBC,KAArB,CAA2BC,IAA3B,CAAgCD,KAAhC,CAAsCE,IAAtC,CAA2C,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAK,YAAlE,CAAzB,CAFsD,CAItD;IACA;IACA;;IACA,MAAMC,eAAe,GAAG,KAAKC,MAAL,CAAYC,UAAZ,KACtBR,gBADsB,aACtBA,gBADsB,uBACtBA,gBAAgB,CAAEE,KADI,MACeF,gBADf,aACeA,gBADf,gDACeA,gBAAgB,CAAES,OADjC,oFACe,sBAA4B,CAA5B,CADf,2DACe,uBAAgCP,KAD/C,CAAxB;;IAGA,IAAII,eAAJ,EAAqB;MACnB,OAAO,EACL,GAAGP,gBADE;QAELS,UAAU,EAAEF;MAFP,CAAP;IAID;;IAED,OAAOP,gBAAP;EACD;;EAEDW,gBAAgB,GAAI;IAClB,OAAO;MAAEL,IAAI,EAAE,UAAR;MAAoBM,IAAI,EAAE;IAA1B,CAAP;EACD;;AAnC+G;;;8BAArGnB,gC,qBACc,qC"}