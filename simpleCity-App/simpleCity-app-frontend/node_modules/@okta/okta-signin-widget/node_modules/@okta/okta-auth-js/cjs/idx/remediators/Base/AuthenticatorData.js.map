{"version":3,"file":"AuthenticatorData.js","names":["AuthenticatorData","Remediator","constructor","remediation","values","authenticator","getAuthenticator","formatAuthenticatorData","authenticatorData","getAuthenticatorData","authenticatorsData","map","data","compareAuthenticators","mapAuthenticatorDataFromValues","push","find","canRemediate","some","methodType","isAuthenticator","id","enrollmentId","getAuthenticatorFromRemediation","value","name","getValuesAfterProceed","filter"],"sources":["../../../../../lib/idx/remediators/Base/AuthenticatorData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { IdxRemediationValue, IdxRemediation, IdxAuthenticator } from '../../types/idx-js';\nimport { isAuthenticator } from '../../types/api';\nimport { compareAuthenticators } from '../../authenticator/util';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData<T extends AuthenticatorDataValues = AuthenticatorDataValues> extends Remediator<T> {\n  authenticator: IdxAuthenticator;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n\n    // set before other data calculation\n    this.authenticator = this.getAuthenticator()!;\n\n    this.formatAuthenticatorData();\n  }\n\n  protected formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData!.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData!.push(data);\n      }\n    }\n  }\n\n  protected getAuthenticatorData() {\n    return this.values.authenticatorsData!\n      .find((data) => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData!\n      .some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  protected mapAuthenticatorDataFromValues(authenticatorData?) {\n    // add methodType to authenticatorData if it exists in values\n    let { methodType, authenticator } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n     methodType = authenticator?.methodType;\n    }\n    \n    const { id, enrollmentId } = this.authenticator;\n    const data = { \n      id,\n      enrollmentId,\n      ...(authenticatorData && authenticatorData),\n      ...(methodType && { methodType }) \n    };\n\n    return data.methodType ? data : null;\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value!\n      .find(({ name }) => name === 'authenticator') as IdxRemediationValue;\n    return authenticator;\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticatorData\n    const authenticatorsData = this.values.authenticatorsData!\n      .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return { ...this.values, authenticatorsData };\n  }\n}\n"],"mappings":";;;;AAaA;;AAEA;;AACA;;AAhBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACO,MAAMA,iBAAN,SAA6FC,sBAA7F,CAA2G;EAGhHC,WAAW,CAACC,WAAD,EAA8BC,MAAS,GAAG,EAA1C,EAAmD;IAC5D,MAAMD,WAAN,EAAmBC,MAAnB,EAD4D,CAG5D;;IACA,KAAKC,aAAL,GAAqB,KAAKC,gBAAL,EAArB;IAEA,KAAKC,uBAAL;EACD;;EAESA,uBAAuB,GAAG;IAClC,MAAMC,iBAAiB,GAAG,KAAKC,oBAAL,EAA1B;;IACA,IAAID,iBAAJ,EAAuB;MACrB,KAAKJ,MAAL,CAAYM,kBAAZ,GAAiC,KAAKN,MAAL,CAAYM,kBAAZ,CAAgCC,GAAhC,CAAoCC,IAAI,IAAI;QAC3E,IAAI,IAAAC,2BAAA,EAAsB,KAAKR,aAA3B,EAA0CO,IAA1C,CAAJ,EAAqD;UACnD,OAAO,KAAKE,8BAAL,CAAoCF,IAApC,CAAP;QACD;;QACD,OAAOA,IAAP;MACD,CALgC,CAAjC;IAMD,CAPD,MAOO;MACL,MAAMA,IAAI,GAAG,KAAKE,8BAAL,EAAb;;MACA,IAAIF,IAAJ,EAAU;QACR,KAAKR,MAAL,CAAYM,kBAAZ,CAAgCK,IAAhC,CAAqCH,IAArC;MACD;IACF;EACF;;EAESH,oBAAoB,GAAG;IAC/B,OAAO,KAAKL,MAAL,CAAYM,kBAAZ,CACJM,IADI,CACEJ,IAAD,IAAU,IAAAC,2BAAA,EAAsB,KAAKR,aAA3B,EAA0CO,IAA1C,CADX,CAAP;EAED;;EAEDK,YAAY,GAAG;IACb,OAAO,KAAKb,MAAL,CAAYM,kBAAZ,CACJQ,IADI,CACCN,IAAI,IAAI,IAAAC,2BAAA,EAAsB,KAAKR,aAA3B,EAA0CO,IAA1C,CADT,CAAP;EAED;;EAESE,8BAA8B,CAACN,iBAAD,EAAqB;IAC3D;IACA,IAAI;MAAEW,UAAF;MAAcd;IAAd,IAAgC,KAAKD,MAAzC;;IACA,IAAI,CAACe,UAAD,IAAe,IAAAC,oBAAA,EAAgBf,aAAhB,CAAnB,EAAmD;MAClDc,UAAU,GAAGd,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEc,UAA5B;IACA;;IAED,MAAM;MAAEE,EAAF;MAAMC;IAAN,IAAuB,KAAKjB,aAAlC;IACA,MAAMO,IAAI,GAAG;MACXS,EADW;MAEXC,YAFW;MAGX,IAAId,iBAAiB,IAAIA,iBAAzB,CAHW;MAIX,IAAIW,UAAU,IAAI;QAAEA;MAAF,CAAlB;IAJW,CAAb;IAOA,OAAOP,IAAI,CAACO,UAAL,GAAkBP,IAAlB,GAAyB,IAAhC;EACD;;EAESW,+BAA+B,GAAwB;IAC/D,MAAMlB,aAAa,GAAG,KAAKF,WAAL,CAAiBqB,KAAjB,CACnBR,IADmB,CACd,CAAC;MAAES;IAAF,CAAD,KAAcA,IAAI,KAAK,eADT,CAAtB;IAEA,OAAOpB,aAAP;EACD;;EAEDqB,qBAAqB,GAAM;IACzB,KAAKtB,MAAL,GAAc,MAAMsB,qBAAN,EAAd,CADyB,CAEzB;;IACA,MAAMhB,kBAAkB,GAAG,KAAKN,MAAL,CAAYM,kBAAZ,CACxBiB,MADwB,CACjBf,IAAI,IAAI,IAAAC,2BAAA,EAAsB,KAAKR,aAA3B,EAA0CO,IAA1C,MAAoD,IAD3C,CAA3B;IAEA,OAAO,EAAE,GAAG,KAAKR,MAAV;MAAkBM;IAAlB,CAAP;EACD;;AArE+G"}