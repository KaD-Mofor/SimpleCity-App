{"version":3,"file":"AuthenticatorVerificationData.js","names":["AuthenticatorVerificationData","AuthenticatorData","mapAuthenticator","getAuthenticatorData","getInputAuthenticator","authenticator","getAuthenticatorFromRemediation","methodType","form","value","find","name","options","type","required","inputs","getValuesAfterProceed","values","trimmedValues","Object","keys","filter","valueKey","reduce"],"sources":["../../../../lib/idx/remediators/AuthenticatorVerificationData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\n\nexport type AuthenticatorVerificationDataValues = AuthenticatorDataValues;\n\nexport class AuthenticatorVerificationData extends AuthenticatorData<AuthenticatorVerificationDataValues> {\n  static remediationName = 'authenticator-verification-data';\n\n  mapAuthenticator() {\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form!.value.find(({ name }) => name === 'methodType');\n    // if has methodType in form, let user select the methodType\n    if (methodType && methodType.options) {\n      return { \n        name: 'methodType', \n        type: 'string', \n        required: true, \n        options: methodType.options \n      };\n    }\n    // no methodType, then return form values\n    const inputs = [...authenticator.form!.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed(): AuthenticatorVerificationDataValues {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"],"mappings":";;;;;;;;AAaA;;AAbA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMO,MAAMA,6BAAN,SAA4CC,oCAA5C,CAAmG;EAGxGC,gBAAgB,GAAG;IACjB,OAAO,KAAKC,oBAAL,EAAP;EACD;;EAEDC,qBAAqB,GAAG;IACtB,MAAMC,aAAa,GAAG,KAAKC,+BAAL,EAAtB;IACA,MAAMC,UAAU,GAAGF,aAAa,CAACG,IAAd,CAAoBC,KAApB,CAA0BC,IAA1B,CAA+B,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAK,YAAtD,CAAnB,CAFsB,CAGtB;;IACA,IAAIJ,UAAU,IAAIA,UAAU,CAACK,OAA7B,EAAsC;MACpC,OAAO;QACLD,IAAI,EAAE,YADD;QAELE,IAAI,EAAE,QAFD;QAGLC,QAAQ,EAAE,IAHL;QAILF,OAAO,EAAEL,UAAU,CAACK;MAJf,CAAP;IAMD,CAXqB,CAYtB;;;IACA,MAAMG,MAAM,GAAG,CAAC,GAAGV,aAAa,CAACG,IAAd,CAAoBC,KAAxB,CAAf;IACA,OAAOM,MAAP;EACD;;EAEDC,qBAAqB,GAAwC;IAC3D,KAAKC,MAAL,GAAc,MAAMD,qBAAN,EAAd;IACA,IAAIE,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKH,MAAjB,EAAyBI,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,eAAzD,CAApB;IACA,OAAOJ,aAAa,CAACK,MAAd,CAAqB,CAACN,MAAD,EAASK,QAAT,MAAuB,EAAC,GAAGL,MAAJ;MAAY,CAACK,QAAD,GAAY,KAAKL,MAAL,CAAYK,QAAZ;IAAxB,CAAvB,CAArB,EAA6F,EAA7F,CAAP;EACD;;AA5BuG;;;8BAA7FtB,6B,qBACc,iC"}