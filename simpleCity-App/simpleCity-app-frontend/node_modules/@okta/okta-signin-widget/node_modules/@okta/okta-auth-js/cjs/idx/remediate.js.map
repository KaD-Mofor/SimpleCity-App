{"version":3,"file":"remediate.js","names":["getActionFromValues","values","idxResponse","Object","keys","actions","find","action","resend","includes","removeActionFromValues","undefined","removeActionFromOptions","options","actionName","filter","entry","name","remediate","authClient","neededToProceed","interactionCode","flow","remediator","getRemediator","actionFromValues","actionFromOptions","params","valuesWithoutExecutedAction","optionsWithoutExecutedAction","requestDidSucceed","handleFailedResponse","canceled","remediationAction","proceed","terminal","isTerminalResponse","step","filterValuesForRemediation","AuthSdkError","reduce","acc","curr","canRemediate","nextStep","getNextStep","getName","data","getData","getValuesAfterProceed","useGenericRemediator","gr"],"sources":["../../../lib/idx/remediate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, max-depth, complexity */\nimport { AuthSdkError } from '../errors';\nimport { RemediationValues } from './remediators';\nimport { OktaAuthIdxInterface, RemediateOptions, RemediationResponse } from './types';\nimport { \n  IdxResponse,\n  IdxActionParams, \n} from './types/idx-js';\nimport {\n  isTerminalResponse,\n  filterValuesForRemediation,\n  getRemediator,\n  getNextStep,\n  handleFailedResponse\n} from './util';\n\nexport interface RemediateActionWithOptionalParams {\n  name: string;\n  params?: IdxActionParams;\n}\n\nexport type RemediateAction = string | RemediateActionWithOptionalParams;\n\n\nfunction getActionFromValues(values: RemediationValues, idxResponse: IdxResponse): string | undefined {\n  // Currently support resend actions only\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\n\nfunction removeActionFromValues(values: RemediationValues): RemediationValues {\n  // Currently support resend actions only\n  return {\n    ...values,\n    resend: undefined\n  };\n}\n\nfunction removeActionFromOptions(options: RemediateOptions, actionName: string): RemediateOptions {\n  let actions = options.actions || [];\n  actions = actions.filter(entry => {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n    return entry.name !== actionName;\n  });\n\n  return { ...options, actions };\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  authClient: OktaAuthIdxInterface,\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions\n): Promise<RemediationResponse> {\n  let { neededToProceed, interactionCode } = idxResponse;\n  const { flow } = options;\n\n  // If the response contains an interaction code, there is no need to remediate\n  if (interactionCode) {\n    return { idxResponse };\n  }\n\n  const remediator = getRemediator(neededToProceed, values, options);\n\n  // Try actions in idxResponse first\n  const actionFromValues = getActionFromValues(values, idxResponse);\n  const actionFromOptions = options.actions || [];\n  const actions = [\n    ...actionFromOptions,\n    ...(actionFromValues && [actionFromValues] || []),\n  ];\n  if (actions) {\n    for (let action of actions) {\n      // Action can either be specified as a string, or as an object with name and optional params\n      let params: IdxActionParams = {};\n      if (typeof action !== 'string') {\n        params = action.params || {};\n        action = action.name;\n      }\n      let valuesWithoutExecutedAction = removeActionFromValues(values);\n      let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n\n      if (typeof idxResponse.actions[action] === 'function') {\n        idxResponse = await idxResponse.actions[action](params);\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n        if (action === 'cancel') {\n          return { idxResponse, canceled: true };\n        }\n        return remediate(\n          authClient, \n          idxResponse, \n          valuesWithoutExecutedAction, \n          optionsWithoutExecutedAction\n        ); // recursive call\n      }\n\n      // search for action in remediation list\n      const remediationAction = neededToProceed.find(({ name }) => name === action);\n      if (remediationAction) {\n        idxResponse = await idxResponse.proceed(action, params);\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n        return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction); // recursive call\n      }\n    }\n  }\n\n  // Do not attempt to remediate if response is in terminal state\n  const terminal = isTerminalResponse(idxResponse);\n  if (terminal) {\n    return { idxResponse, terminal };\n  }\n\n  if (!remediator) {\n    // With options.step, remediator is not required\n    if (options.step) {\n      values = filterValuesForRemediation(idxResponse, options.step, values); // include only requested values\n      idxResponse = await idxResponse.proceed(options.step, values);\n      if (idxResponse.requestDidSucceed === false) {\n        return handleFailedResponse(authClient, idxResponse, options);\n      }\n      return { idxResponse };\n    }\n\n    // With default flow, remediator is not required\n    if (flow === 'default') {\n      return { idxResponse };\n    }\n    throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n  }\n\n  // Return next step to the caller\n  if (!remediator.canRemediate()) {\n    const nextStep = getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      nextStep,\n    };\n  }\n\n  const name = remediator.getName();\n  const data = remediator.getData();\n\n  idxResponse = await idxResponse.proceed(name, data);\n  if (idxResponse.requestDidSucceed === false) {\n    return handleFailedResponse(authClient, idxResponse, options);\n  }\n  // We may want to trim the values bag for the next remediation\n  // Let the remediator decide what the values should be (default to current values)\n  values = remediator.getValuesAfterProceed();\n  options = { ...options, step: undefined }; // do not re-use the step\n\n  // generic remediator should not auto proceed in pending status\n  // return nextStep directly\n  if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const gr = getRemediator(idxResponse.neededToProceed, values, options)!;\n    const nextStep = getNextStep(authClient, gr, idxResponse);\n    return {\n      idxResponse,\n      nextStep,\n    };\n  }\n  \n  return remediate(authClient, idxResponse, values, options); // recursive call\n\n}\n"],"mappings":"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"}