{"version":3,"file":"EnrollmentChannelData.js","names":["EnrollmentChannelData","Remediator","getInputEmail","name","type","required","label","getInputPhoneNumber","canRemediate","Boolean","values","email","phoneNumber","getNextStep","authClient","context","common","authenticator","currentAuthenticator","value","getData","stateHandle","getValuesAfterProceed","trimmedValues","Object","keys","filter","valueKey","includes","reduce"],"sources":["../../../../lib/idx/remediators/EnrollmentChannelData.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { IdxContext } from '../types/idx-js';\nimport { OktaAuthIdxInterface } from '../types';\n\n\nexport type EnrollmentChannelDataValues = RemediationValues & {\n  email?: string;\n  phoneNumber?: string;\n};\n\nexport class EnrollmentChannelData extends Remediator<EnrollmentChannelDataValues> {\n  static remediationName = 'enrollment-channel-data';\n\n  getInputEmail() {\n    return [\n      { name: 'email', type: 'string', required: true, label: 'Email' },\n    ];\n  }\n\n  getInputPhoneNumber() {\n    return [\n      { name: 'phoneNumber', type: 'string', required: true, label: 'Phone Number' },\n    ];\n  }\n\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context: IdxContext) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return {\n      ...common,\n      authenticator,\n    };\n  }\n\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n\n  getValuesAfterProceed(): EnrollmentChannelDataValues {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"],"mappings":";;;;;;;;AAaA;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAMA,qBAAN,SAAoCC,sBAApC,CAA4E;EAGjFC,aAAa,GAAG;IACd,OAAO,CACL;MAAEC,IAAI,EAAE,OAAR;MAAiBC,IAAI,EAAE,QAAvB;MAAiCC,QAAQ,EAAE,IAA3C;MAAiDC,KAAK,EAAE;IAAxD,CADK,CAAP;EAGD;;EAEDC,mBAAmB,GAAG;IACpB,OAAO,CACL;MAAEJ,IAAI,EAAE,aAAR;MAAuBC,IAAI,EAAE,QAA7B;MAAuCC,QAAQ,EAAE,IAAjD;MAAuDC,KAAK,EAAE;IAA9D,CADK,CAAP;EAGD;;EAEDE,YAAY,GAAG;IACb,OAAOC,OAAO,CAAC,KAAKC,MAAL,CAAYC,KAAZ,IAAqB,KAAKD,MAAL,CAAYE,WAAlC,CAAd;EACD;;EAEDC,WAAW,CAACC,UAAD,EAAmCC,OAAnC,EAAwD;IACjE,MAAMC,MAAM,GAAG,MAAMH,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAf;IACA,MAAME,aAAa,GAAGF,OAAO,CAACG,oBAAR,CAA6BC,KAAnD;IACA,OAAO,EACL,GAAGH,MADE;MAELC;IAFK,CAAP;EAID;;EAEDG,OAAO,GAAG;IACR,OAAO;MACLC,WAAW,EAAE,KAAKX,MAAL,CAAYW,WADpB;MAELV,KAAK,EAAE,KAAKD,MAAL,CAAYC,KAFd;MAGLC,WAAW,EAAE,KAAKF,MAAL,CAAYE;IAHpB,CAAP;EAKD;;EAEDU,qBAAqB,GAAgC;IACnD,IAAIC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKf,MAAjB,EAAyBgB,MAAzB,CAAgCC,QAAQ,IAAI,CAAC,CAAC,OAAD,EAAU,aAAV,EAAyBC,QAAzB,CAAkCD,QAAlC,CAA7C,CAApB;IACA,OAAOJ,aAAa,CAACM,MAAd,CAAqB,CAACnB,MAAD,EAASiB,QAAT,MAAuB,EAAC,GAAGjB,MAAJ;MAAY,CAACiB,QAAD,GAAY,KAAKjB,MAAL,CAAYiB,QAAZ;IAAxB,CAAvB,CAArB,EAA6F,EAA7F,CAAP;EACD;;AAvCgF;;;8BAAtE3B,qB,qBACc,yB"}