import { WidgetOptions } from '../types/options';
declare const OktaSignIn_base: {
    new (options: WidgetOptions): {
        Router: import("../types").RouterConstructor<import("../types").AbstractRouter>;
        options: WidgetOptions;
        hooks: import("../models/Hooks").default;
        router: import("../types").AbstractRouter;
        authClient: import("../types").WidgetOktaAuthInterface;
        _eventCallbackMap: WeakMap<import("../types").EventCallback | import("../types").EventCallbackWithError, import("../types").EventCallback | import("../types").EventCallbackWithError>;
        renderEl(renderOptions: import("../types").RenderOptions, successFn?: import("../types").RenderSuccessCallback, errorFn?: import("../types").RenderErrorCallback): Promise<import("../types").RenderResult>;
        hide(): void;
        show(): void;
        remove(): void;
        showSignInToGetTokens(options?: import("../types").RenderOptions): Promise<import("@okta/okta-auth-js").Tokens>;
        showSignInAndRedirect(options?: import("../types").RenderOptions): Promise<void>;
        showSignIn(options?: import("../types").RenderOptions): Promise<import("../types").RenderResult>;
        before(formName: string, callbackFn: import("../types").HookFunction): void;
        after(formName: string, callbackFn: import("../types").HookFunction): void;
        getUser(): any;
        on(event: import("../types").EventName, callback: import("../types").EventCallback | import("../types").EventCallbackWithError): void;
        off(event?: import("../types").EventName, callback?: import("../types").EventCallback | import("../types").EventCallbackWithError): void;
        once(event: import("../types").EventName, callback: import("../types").EventCallback): void;
        stopListening(event?: import("../types").EventName, callback?: import("../types").EventCallback): void;
        listenTo(object: any, event: import("../types").EventName, callback: import("../types").EventCallback): void;
        trigger(event: import("../types").EventName, ...args: any[]): void;
    };
};
declare class OktaSignIn extends OktaSignIn_base {
    constructor(options: WidgetOptions);
}
export default OktaSignIn;
export { OktaSignIn };
export * from '../types';
//# sourceMappingURL=classic.d.ts.map