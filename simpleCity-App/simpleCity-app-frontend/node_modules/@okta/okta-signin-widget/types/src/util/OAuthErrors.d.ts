import { AuthSdkError, OAuthError as SdkOAuthError } from '@okta/okta-auth-js';
import { OAuthError } from './Errors';
import { ErrorDetails } from '../types/errors';
declare type ErrorTraits = 'inline' | 'terminal';
declare type ErrorType = {
    [key in ErrorTraits]?: boolean;
};
declare class InlineErrorType implements ErrorType {
    inline: boolean;
}
declare class TerminalErrorType implements ErrorType {
    terminal: boolean;
}
declare class TypedOAuthError<T extends ErrorType> extends OAuthError {
    errorType: T;
    orginalError: AuthSdkError | SdkOAuthError;
    errorDetails: ErrorDetails;
    constructor(originalError: AuthSdkError | SdkOAuthError, errorTypeCtor: new () => T);
    protected getErrorSummary(): string;
    is(errorTrait: ErrorTraits): boolean;
}
declare class RecoverableError<T extends ErrorType> extends TypedOAuthError<T> {
}
declare class NonRecoverableError<T extends ErrorType> extends TypedOAuthError<T> {
}
declare class ClockDriftError extends RecoverableError<TerminalErrorType> {
    constructor(error: AuthSdkError | SdkOAuthError);
    getErrorSummary(): string;
}
declare class UserNotAssignedError extends RecoverableError<InlineErrorType> {
    constructor(error: AuthSdkError | SdkOAuthError);
}
declare class JITProfileProvisioningError extends RecoverableError<InlineErrorType> {
    constructor(error: AuthSdkError | SdkOAuthError);
    getErrorSummary(): string;
}
declare class MfaRequiredError extends NonRecoverableError<InlineErrorType> {
    constructor(error: AuthSdkError | SdkOAuthError);
    getErrorSummary(): string;
}
declare function getTypedOAuthError(error: AuthSdkError | SdkOAuthError): MfaRequiredError | RecoverableError<Object>;
export { RecoverableError, NonRecoverableError, JITProfileProvisioningError, ClockDriftError, UserNotAssignedError, MfaRequiredError, TypedOAuthError, getTypedOAuthError };
//# sourceMappingURL=OAuthErrors.d.ts.map