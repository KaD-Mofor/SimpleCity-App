var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { Injectable, Inject } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { filter } from 'rxjs/operators';
import { OKTA_AUTH } from './models/okta.config';
import * as i0 from "@angular/core";
import * as i1 from "./services/auth-config.serice";
import * as i2 from "@okta/okta-auth-js";
export class OktaAuthGuard {
    constructor(oktaAuth, injector, configService) {
        this.oktaAuth = oktaAuth;
        this.injector = injector;
        this.configService = configService;
        this.updateAuthStateListener = (authState) => __awaiter(this, void 0, void 0, function* () {
            const isAuthenticated = yield this.isAuthenticated(this.routeData, authState);
            if (!isAuthenticated) {
                this.handleLogin(this.state.url, this.routeData);
            }
        });
        const config = this.configService.getConfig();
        if (!config) {
            throw new Error('Okta config is not provided');
        }
        this.onAuthRequired = config.onAuthRequired;
        // Unsubscribe updateAuthStateListener when route change
        const router = injector.get(Router);
        router.events.pipe(filter((e) => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {
            this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);
        });
    }
    canLoad(route) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.onAuthRequired = ((_a = route.data) === null || _a === void 0 ? void 0 : _a.onAuthRequired) || this.onAuthRequired;
            const isAuthenticated = yield this.isAuthenticated(route.data);
            if (isAuthenticated) {
                return true;
            }
            const router = this.injector.get(Router);
            const nav = router.getCurrentNavigation();
            const originalUri = nav ? nav.extractedUrl.toString() : undefined;
            yield this.handleLogin(originalUri, route.data);
            return false;
        });
    }
    /**
     * Gateway for protected route. Returns true if there is a valid idToken,
     * otherwise it will cache the route and start the login flow.
     * @param route
     * @param state
     */
    canActivate(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            // Track states for current route
            this.state = state;
            this.routeData = route.data;
            this.onAuthRequired = route.data && route.data.onAuthRequired || this.onAuthRequired;
            // Protect the route after accessing
            this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);
            const isAuthenticated = yield this.isAuthenticated(route.data);
            if (isAuthenticated) {
                return true;
            }
            yield this.handleLogin(state.url, route.data);
            return false;
        });
    }
    canActivateChild(route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.canActivate(route, state);
        });
    }
    isAuthenticated(routeData, authState) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const isAuthenticated = authState ? authState === null || authState === void 0 ? void 0 : authState.isAuthenticated : yield this.oktaAuth.isAuthenticated();
            let res = isAuthenticated;
            if ((_a = routeData === null || routeData === void 0 ? void 0 : routeData.okta) === null || _a === void 0 ? void 0 : _a.acrValues) {
                if (!authState) {
                    authState = this.oktaAuth.authStateManager.getAuthState();
                }
                res = ((_b = authState === null || authState === void 0 ? void 0 : authState.idToken) === null || _b === void 0 ? void 0 : _b.claims.acr) === ((_c = routeData === null || routeData === void 0 ? void 0 : routeData.okta) === null || _c === void 0 ? void 0 : _c.acrValues);
            }
            return res;
        });
    }
    handleLogin(originalUri, routeData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // Store the current path
            if (originalUri) {
                this.oktaAuth.setOriginalUri(originalUri);
            }
            const options = {};
            if ((_a = routeData === null || routeData === void 0 ? void 0 : routeData.okta) === null || _a === void 0 ? void 0 : _a.acrValues) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore Supports auth-js >= 7.1.0
                options.acrValues = routeData.okta.acrValues;
            }
            if (this.onAuthRequired) {
                this.onAuthRequired(this.oktaAuth, this.injector, options);
            }
            else {
                this.oktaAuth.signInWithRedirect(options);
            }
        });
    }
}
OktaAuthGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthGuard, deps: [{ token: OKTA_AUTH }, { token: i0.Injector }, { token: i1.OktaAuthConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
OktaAuthGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthGuard });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthGuard, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.OktaAuth, decorators: [{
                    type: Inject,
                    args: [OKTA_AUTH]
                }] }, { type: i0.Injector }, { type: i1.OktaAuthConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,