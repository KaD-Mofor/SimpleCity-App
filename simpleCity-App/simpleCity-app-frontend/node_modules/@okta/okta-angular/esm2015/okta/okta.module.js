var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { NgModule, Inject, Optional, VERSION } from '@angular/core';
import { OktaCallbackComponent } from './components/callback.component';
import { OktaAuthGuard } from './okta.guard';
import { OktaAuthStateService } from './services/auth-state.service';
import { OktaHasAnyGroupDirective } from './has-any-group.directive';
import { OKTA_CONFIG, OKTA_AUTH } from './models/okta.config';
import { AuthSdkError, toRelativeUrl } from '@okta/okta-auth-js';
import { compare } from 'compare-versions';
import packageInfo from './packageInfo';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/router";
export function oktaAuthFactory(config) {
    return config.oktaAuth;
}
export class OktaAuthModule {
    constructor(config, location, router) {
        const { oktaAuth } = config;
        const isAuthJsSupported = oktaAuth._oktaUserAgent && compare(oktaAuth._oktaUserAgent.getVersion(), packageInfo.authJSMinSupportedVersion, '>=');
        if (!isAuthJsSupported) {
            throw new AuthSdkError(`Passed in oktaAuth is not compatible with the SDK, minimum supported okta-auth-js version is ${packageInfo.authJSMinSupportedVersion}.`);
        }
        // Add Okta UA
        oktaAuth._oktaUserAgent.addEnvironment(`${packageInfo.name}/${packageInfo.version}`);
        oktaAuth._oktaUserAgent.addEnvironment(`Angular/${VERSION.full}`);
        // Provide a default implementation of `restoreOriginalUri`
        if (!oktaAuth.options.restoreOriginalUri && router && location) {
            oktaAuth.options.restoreOriginalUri = (_, originalUri) => __awaiter(this, void 0, void 0, function* () {
                const baseUrl = window.location.origin + location.prepareExternalUrl('');
                const routePath = toRelativeUrl(originalUri || '/', baseUrl);
                router.navigateByUrl(routePath);
            });
        }
        // Start services
        oktaAuth.start();
    }
    static forRoot(config) {
        return {
            ngModule: OktaAuthModule,
            providers: [
                OktaAuthGuard,
                OktaAuthStateService,
                { provide: OKTA_CONFIG, useValue: config },
                {
                    provide: OKTA_AUTH,
                    useFactory: oktaAuthFactory,
                    deps: [OKTA_CONFIG]
                },
            ]
        };
    }
}
OktaAuthModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthModule, deps: [{ token: OKTA_CONFIG }, { token: i1.Location, optional: true }, { token: i2.Router, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
OktaAuthModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthModule, declarations: [OktaCallbackComponent,
        OktaHasAnyGroupDirective], exports: [OktaCallbackComponent,
        OktaHasAnyGroupDirective] });
OktaAuthModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthModule, providers: [
        OktaAuthGuard,
        OktaAuthStateService,
        {
            provide: OKTA_AUTH,
            useFactory: oktaAuthFactory,
            deps: [OKTA_CONFIG]
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaAuthModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        OktaCallbackComponent,
                        OktaHasAnyGroupDirective,
                    ],
                    exports: [
                        OktaCallbackComponent,
                        OktaHasAnyGroupDirective,
                    ],
                    providers: [
                        OktaAuthGuard,
                        OktaAuthStateService,
                        {
                            provide: OKTA_AUTH,
                            useFactory: oktaAuthFactory,
                            deps: [OKTA_CONFIG]
                        },
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [OKTA_CONFIG]
                }] }, { type: i1.Location, decorators: [{
                    type: Optional
                }] }, { type: i2.Router, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2t0YS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3JjL29rdGEvb2t0YS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7R0FVRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUFjLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFZLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLFdBQVcsTUFBTSxlQUFlLENBQUM7Ozs7QUFFeEMsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFrQjtJQUNoRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7QUFDekIsQ0FBQztBQXFCRCxNQUFNLE9BQU8sY0FBYztJQWlCekIsWUFDdUIsTUFBa0IsRUFDM0IsUUFBbUIsRUFDbkIsTUFBZTtRQUUzQixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBRTVCLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxXQUFXLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEosSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLE1BQU0sSUFBSSxZQUFZLENBQUMsZ0dBQWdHLFdBQVcsQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7U0FDbEs7UUFFRCxjQUFjO1FBQ2QsUUFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JGLFFBQVEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLFdBQVcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFbEUsMkRBQTJEO1FBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGtCQUFrQixJQUFJLE1BQU0sSUFBSSxRQUFRLEVBQUU7WUFDOUQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxDQUFPLENBQUMsRUFBRSxXQUErQixFQUFFLEVBQUU7Z0JBQ2pGLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDekUsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLFdBQVcsSUFBSSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzdELE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFBLENBQUM7U0FDSDtRQUVELGlCQUFpQjtRQUNqQixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQTNDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQW1CO1FBQ2hDLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUU7Z0JBQ1QsYUFBYTtnQkFDYixvQkFBb0I7Z0JBQ3BCLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2dCQUMxQztvQkFDRSxPQUFPLEVBQUUsU0FBUztvQkFDbEIsVUFBVSxFQUFFLGVBQWU7b0JBQzNCLElBQUksRUFBRSxDQUFFLFdBQVcsQ0FBRTtpQkFDdEI7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs0R0FmVSxjQUFjLGtCQWtCZixXQUFXOzZHQWxCVixjQUFjLGlCQWpCdkIscUJBQXFCO1FBQ3JCLHdCQUF3QixhQUd4QixxQkFBcUI7UUFDckIsd0JBQXdCOzZHQVlmLGNBQWMsYUFWZDtRQUNULGFBQWE7UUFDYixvQkFBb0I7UUFDcEI7WUFDRSxPQUFPLEVBQUUsU0FBUztZQUNsQixVQUFVLEVBQUUsZUFBZTtZQUMzQixJQUFJLEVBQUUsQ0FBRSxXQUFXLENBQUU7U0FDdEI7S0FDRjs0RkFFVSxjQUFjO2tCQW5CMUIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1oscUJBQXFCO3dCQUNyQix3QkFBd0I7cUJBQ3pCO29CQUNELE9BQU8sRUFBRTt3QkFDUCxxQkFBcUI7d0JBQ3JCLHdCQUF3QjtxQkFDekI7b0JBQ0QsU0FBUyxFQUFFO3dCQUNULGFBQWE7d0JBQ2Isb0JBQW9CO3dCQUNwQjs0QkFDRSxPQUFPLEVBQUUsU0FBUzs0QkFDbEIsVUFBVSxFQUFFLGVBQWU7NEJBQzNCLElBQUksRUFBRSxDQUFFLFdBQVcsQ0FBRTt5QkFDdEI7cUJBQ0Y7aUJBQ0Y7OzBCQW1CSSxNQUFNOzJCQUFDLFdBQVc7OzBCQUNsQixRQUFROzswQkFDUixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNy1QcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdCwgT3B0aW9uYWwsIFZFUlNJT04gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPa3RhQ2FsbGJhY2tDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY2FsbGJhY2suY29tcG9uZW50JztcbmltcG9ydCB7IE9rdGFBdXRoR3VhcmQgfSBmcm9tICcuL29rdGEuZ3VhcmQnO1xuaW1wb3J0IHsgT2t0YUF1dGhTdGF0ZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2F1dGgtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBPa3RhSGFzQW55R3JvdXBEaXJlY3RpdmUgfSBmcm9tICcuL2hhcy1hbnktZ3JvdXAuZGlyZWN0aXZlJztcbmltcG9ydCB7IE9rdGFDb25maWcsIE9LVEFfQ09ORklHLCBPS1RBX0FVVEggfSBmcm9tICcuL21vZGVscy9va3RhLmNvbmZpZyc7XG5pbXBvcnQgeyBBdXRoU2RrRXJyb3IsIE9rdGFBdXRoLCB0b1JlbGF0aXZlVXJsIH0gZnJvbSAnQG9rdGEvb2t0YS1hdXRoLWpzJztcbmltcG9ydCB7IGNvbXBhcmUgfSBmcm9tICdjb21wYXJlLXZlcnNpb25zJztcbmltcG9ydCBwYWNrYWdlSW5mbyBmcm9tICcuL3BhY2thZ2VJbmZvJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9rdGFBdXRoRmFjdG9yeShjb25maWc6IE9rdGFDb25maWcpOiBPa3RhQXV0aCB7XG4gIHJldHVybiBjb25maWcub2t0YUF1dGg7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE9rdGFDYWxsYmFja0NvbXBvbmVudCxcbiAgICBPa3RhSGFzQW55R3JvdXBEaXJlY3RpdmUsXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBPa3RhQ2FsbGJhY2tDb21wb25lbnQsXG4gICAgT2t0YUhhc0FueUdyb3VwRGlyZWN0aXZlLFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBPa3RhQXV0aEd1YXJkLFxuICAgIE9rdGFBdXRoU3RhdGVTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE9LVEFfQVVUSCxcbiAgICAgIHVzZUZhY3Rvcnk6IG9rdGFBdXRoRmFjdG9yeSxcbiAgICAgIGRlcHM6IFsgT0tUQV9DT05GSUcgXVxuICAgIH0sXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgT2t0YUF1dGhNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBPa3RhQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxPa3RhQXV0aE1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogT2t0YUF1dGhNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgT2t0YUF1dGhHdWFyZCxcbiAgICAgICAgT2t0YUF1dGhTdGF0ZVNlcnZpY2UsXG4gICAgICAgIHsgcHJvdmlkZTogT0tUQV9DT05GSUcsIHVzZVZhbHVlOiBjb25maWcgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE9LVEFfQVVUSCxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBva3RhQXV0aEZhY3RvcnksXG4gICAgICAgICAgZGVwczogWyBPS1RBX0NPTkZJRyBdXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoT0tUQV9DT05GSUcpIGNvbmZpZzogT2t0YUNvbmZpZywgXG4gICAgQE9wdGlvbmFsKCkgbG9jYXRpb24/OiBMb2NhdGlvbiwgXG4gICAgQE9wdGlvbmFsKCkgcm91dGVyPzogUm91dGVyXG4gICkge1xuICAgIGNvbnN0IHsgb2t0YUF1dGggfSA9IGNvbmZpZztcblxuICAgIGNvbnN0IGlzQXV0aEpzU3VwcG9ydGVkID0gb2t0YUF1dGguX29rdGFVc2VyQWdlbnQgJiYgY29tcGFyZShva3RhQXV0aC5fb2t0YVVzZXJBZ2VudC5nZXRWZXJzaW9uKCksIHBhY2thZ2VJbmZvLmF1dGhKU01pblN1cHBvcnRlZFZlcnNpb24sICc+PScpO1xuICAgIGlmICghaXNBdXRoSnNTdXBwb3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoYFBhc3NlZCBpbiBva3RhQXV0aCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBTREssIG1pbmltdW0gc3VwcG9ydGVkIG9rdGEtYXV0aC1qcyB2ZXJzaW9uIGlzICR7cGFja2FnZUluZm8uYXV0aEpTTWluU3VwcG9ydGVkVmVyc2lvbn0uYCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIE9rdGEgVUFcbiAgICBva3RhQXV0aC5fb2t0YVVzZXJBZ2VudC5hZGRFbnZpcm9ubWVudChgJHtwYWNrYWdlSW5mby5uYW1lfS8ke3BhY2thZ2VJbmZvLnZlcnNpb259YCk7XG4gICAgb2t0YUF1dGguX29rdGFVc2VyQWdlbnQuYWRkRW52aXJvbm1lbnQoYEFuZ3VsYXIvJHtWRVJTSU9OLmZ1bGx9YCk7XG5cbiAgICAvLyBQcm92aWRlIGEgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgcmVzdG9yZU9yaWdpbmFsVXJpYFxuICAgIGlmICghb2t0YUF1dGgub3B0aW9ucy5yZXN0b3JlT3JpZ2luYWxVcmkgJiYgcm91dGVyICYmIGxvY2F0aW9uKSB7XG4gICAgICBva3RhQXV0aC5vcHRpb25zLnJlc3RvcmVPcmlnaW5hbFVyaSA9IGFzeW5jIChfLCBvcmlnaW5hbFVyaTogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgbG9jYXRpb24ucHJlcGFyZUV4dGVybmFsVXJsKCcnKTtcbiAgICAgICAgY29uc3Qgcm91dGVQYXRoID0gdG9SZWxhdGl2ZVVybChvcmlnaW5hbFVyaSB8fCAnLycsIGJhc2VVcmwpO1xuICAgICAgICByb3V0ZXIubmF2aWdhdGVCeVVybChyb3V0ZVBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTdGFydCBzZXJ2aWNlc1xuICAgIG9rdGFBdXRoLnN0YXJ0KCk7XG4gIH1cblxufVxuIl19