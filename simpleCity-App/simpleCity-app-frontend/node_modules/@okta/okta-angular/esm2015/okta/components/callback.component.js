var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
 * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
import { Component, Optional, Inject } from '@angular/core';
import { OKTA_CONFIG, OKTA_AUTH } from '../models/okta.config';
import * as i0 from "@angular/core";
import * as i1 from "@okta/okta-auth-js";
export class OktaCallbackComponent {
    constructor(config, oktaAuth, injector) {
        this.config = config;
        this.oktaAuth = oktaAuth;
        this.injector = injector;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri
                yield this.oktaAuth.handleLoginRedirect();
            }
            catch (e) {
                // Callback from social IDP. Show custom login page to continue.
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore Supports auth-js v5 & v6-7
                const isInteractionRequiredError = this.oktaAuth.isInteractionRequiredError || this.oktaAuth.idx.isInteractionRequiredError;
                if (isInteractionRequiredError(e) && this.injector) {
                    const { onAuthResume, onAuthRequired } = this.config;
                    const callbackFn = onAuthResume || onAuthRequired;
                    if (callbackFn) {
                        callbackFn(this.oktaAuth, this.injector);
                        return;
                    }
                }
                this.error = e.toString();
            }
        });
    }
}
OktaCallbackComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaCallbackComponent, deps: [{ token: OKTA_CONFIG }, { token: OKTA_AUTH }, { token: i0.Injector, optional: true }], target: i0.ɵɵFactoryTarget.Component });
OktaCallbackComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: OktaCallbackComponent, selector: "ng-component", ngImport: i0, template: `<div>{{error}}</div>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: OktaCallbackComponent, decorators: [{
            type: Component,
            args: [{
                    template: `<div>{{error}}</div>`
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [OKTA_CONFIG]
                }] }, { type: i1.OktaAuth, decorators: [{
                    type: Inject,
                    args: [OKTA_AUTH]
                }] }, { type: i0.Injector, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGJhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL3NyYy9va3RhL2NvbXBvbmVudHMvY2FsbGJhY2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7O0dBVUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFVLFFBQVEsRUFBWSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUUsT0FBTyxFQUFFLFdBQVcsRUFBYyxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBSzNFLE1BQU0sT0FBTyxxQkFBcUI7SUFHaEMsWUFDK0IsTUFBa0IsRUFDcEIsUUFBa0IsRUFDekIsUUFBbUI7UUFGVixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3BCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDekIsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUN0QyxDQUFDO0lBRUUsUUFBUTs7WUFDWixJQUFJO2dCQUNGLDRHQUE0RztnQkFDNUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDM0M7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixnRUFBZ0U7Z0JBQ2hFLDZEQUE2RDtnQkFDN0Qsd0NBQXdDO2dCQUN4QyxNQUFNLDBCQUEwQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUM7Z0JBQzVILElBQUksMEJBQTBCLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDbEQsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO29CQUNyRCxNQUFNLFVBQVUsR0FBRyxZQUFZLElBQUksY0FBYyxDQUFDO29CQUNsRCxJQUFJLFVBQVUsRUFBRTt3QkFDZCxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQ3pDLE9BQU87cUJBQ1I7aUJBQ0Y7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssR0FBSSxDQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDdEM7UUFDSCxDQUFDO0tBQUE7O21IQTVCVSxxQkFBcUIsa0JBSXRCLFdBQVcsYUFDWCxTQUFTO3VHQUxSLHFCQUFxQixvREFGdEIsc0JBQXNCOzRGQUVyQixxQkFBcUI7a0JBSGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtpQkFDakM7OzBCQUtJLE1BQU07MkJBQUMsV0FBVzs7MEJBQ2xCLE1BQU07MkJBQUMsU0FBUzs7MEJBQ2hCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LVByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT3B0aW9uYWwsIEluamVjdG9yLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9rdGFBdXRoIH0gZnJvbSAnQG9rdGEvb2t0YS1hdXRoLWpzJztcbmltcG9ydCB7IE9LVEFfQ09ORklHLCBPa3RhQ29uZmlnLCBPS1RBX0FVVEggfSBmcm9tICcuLi9tb2RlbHMvb2t0YS5jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6IGA8ZGl2Pnt7ZXJyb3J9fTwvZGl2PmBcbn0pXG5leHBvcnQgY2xhc3MgT2t0YUNhbGxiYWNrQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgZXJyb3I/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChPS1RBX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IE9rdGFDb25maWcsXG4gICAgQEluamVjdChPS1RBX0FVVEgpIHByaXZhdGUgb2t0YUF1dGg6IE9rdGFBdXRoLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgaW5qZWN0b3I/OiBJbmplY3RvclxuICApIHt9XG5cbiAgYXN5bmMgbmdPbkluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFBhcnNlIGNvZGUgb3IgdG9rZW5zIGZyb20gdGhlIFVSTCwgc3RvcmUgdG9rZW5zIGluIHRoZSBUb2tlbk1hbmFnZXIsIGFuZCByZWRpcmVjdCBiYWNrIHRvIHRoZSBvcmlnaW5hbFVyaVxuICAgICAgYXdhaXQgdGhpcy5va3RhQXV0aC5oYW5kbGVMb2dpblJlZGlyZWN0KCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gQ2FsbGJhY2sgZnJvbSBzb2NpYWwgSURQLiBTaG93IGN1c3RvbSBsb2dpbiBwYWdlIHRvIGNvbnRpbnVlLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgLy8gQHRzLWlnbm9yZSBTdXBwb3J0cyBhdXRoLWpzIHY1ICYgdjYtN1xuICAgICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3IgPSB0aGlzLm9rdGFBdXRoLmlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yIHx8IHRoaXMub2t0YUF1dGguaWR4LmlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yO1xuICAgICAgaWYgKGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yKGUpICYmIHRoaXMuaW5qZWN0b3IpIHtcbiAgICAgICAgY29uc3QgeyBvbkF1dGhSZXN1bWUsIG9uQXV0aFJlcXVpcmVkIH0gPSB0aGlzLmNvbmZpZztcbiAgICAgICAgY29uc3QgY2FsbGJhY2tGbiA9IG9uQXV0aFJlc3VtZSB8fCBvbkF1dGhSZXF1aXJlZDtcbiAgICAgICAgaWYgKGNhbGxiYWNrRm4pIHtcbiAgICAgICAgICBjYWxsYmFja0ZuKHRoaXMub2t0YUF1dGgsIHRoaXMuaW5qZWN0b3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5lcnJvciA9IChlIGFzIEVycm9yKS50b1N0cmluZygpO1xuICAgIH1cbiAgfVxufVxuIl19